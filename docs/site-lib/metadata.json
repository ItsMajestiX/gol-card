{"createdTime":1757993381501,"shownInTree":["daily/1-7-25.html","daily/1-8-25.html","daily/1-16-25.html","daily/2-4-25.html","daily/2-9-25.html","daily/11-27-24.html","daily/11-30-24.html","daily/12-3-24.html","daily/12-7-24.html","daily/12-14-24.html","daily/12-22-24.html","daily/12-30-24.html","img/first_img.jpg","img/first_img.html","img/img_7776.jpeg","img/img_7776.html","img/img_7778.jpeg","img/img_7778.html","img/img_7779.jpeg","img/img_7779.html","img/img_7780.jpeg","img/img_7780.html","img/img_7781.jpeg","img/img_7781.html","img/img_7782.mov","img/img_7782.html","img/img_7807.jpeg","img/img_7807.html","img/pasted-image-20241130232126.png","img/pasted-image-20241130232126.html","component-selection.html","early-planning-note.html","index.html","pcb-assembly.html","pcb-design.html","project-outline.html","zig.html"],"attachments":["img/first_img.jpg","img/img_7776.jpeg","img/img_7778.jpeg","img/img_7779.jpeg","img/img_7780.jpeg","img/img_7781.jpeg","img/img_7782.mov","img/img_7807.jpeg","img/pasted-image-20241130232126.png","site-lib/scripts/graph-wasm.wasm","site-lib/fonts/94f2f163d4b698242fef.otf","site-lib/fonts/72505e6a122c6acd5471.woff2","site-lib/fonts/2d5198822ab091ce4305.woff2","site-lib/fonts/c8ba52b05a9ef10f4758.woff2","site-lib/fonts/cb10ffd7684cd9836a05.woff2","site-lib/fonts/293fd13dbca5a3e450ef.woff2","site-lib/fonts/085cb93e613ba3d40d2b.woff2","site-lib/fonts/b5f0f109bc88052d4000.woff2","site-lib/fonts/cbe0ae49c52c920fd563.woff2","site-lib/fonts/535a6cf662596b3bd6a6.woff2","site-lib/fonts/70cc7ff27245e82ad414.ttf","site-lib/fonts/454577c22304619db035.ttf","site-lib/fonts/52ac8f3034507f1d9e53.ttf","site-lib/fonts/05b618077343fbbd92b7.ttf","site-lib/fonts/4bb6ac751d1c5478ff3a.woff2","site-lib/media/6155340132a851f6089e.svg","site-lib/media/2308ab1944a6bfa5c5b8.svg","site-lib/html/file-tree-content.html","site-lib/scripts/webpage.js","site-lib/scripts/graph-wasm.js","site-lib/scripts/graph-render-worker.js","site-lib/media/favicon.png","site-lib/styles/obsidian.css","site-lib/styles/global-variable-styles.css","site-lib/styles/main-styles.css"],"allFiles":["index.html","img/img_7807.jpeg","img/img_7807.html","img/img_7782.mov","img/img_7782.html","img/img_7781.jpeg","img/img_7781.html","img/img_7780.jpeg","img/img_7780.html","img/img_7779.jpeg","img/img_7779.html","img/img_7778.jpeg","img/img_7778.html","img/img_7776.jpeg","img/img_7776.html","pcb-design.html","zig.html","component-selection.html","pcb-assembly.html","early-planning-note.html","project-outline.html","daily/1-16-25.html","daily/2-9-25.html","img/first_img.jpg","img/first_img.html","daily/2-4-25.html","daily/1-7-25.html","daily/1-8-25.html","daily/12-7-24.html","daily/12-14-24.html","daily/12-22-24.html","daily/11-30-24.html","daily/12-30-24.html","daily/12-3-24.html","img/pasted-image-20241130232126.png","img/pasted-image-20241130232126.html","daily/11-27-24.html","site-lib/scripts/graph-wasm.wasm","site-lib/fonts/94f2f163d4b698242fef.otf","site-lib/fonts/72505e6a122c6acd5471.woff2","site-lib/fonts/2d5198822ab091ce4305.woff2","site-lib/fonts/c8ba52b05a9ef10f4758.woff2","site-lib/fonts/cb10ffd7684cd9836a05.woff2","site-lib/fonts/293fd13dbca5a3e450ef.woff2","site-lib/fonts/085cb93e613ba3d40d2b.woff2","site-lib/fonts/b5f0f109bc88052d4000.woff2","site-lib/fonts/cbe0ae49c52c920fd563.woff2","site-lib/fonts/535a6cf662596b3bd6a6.woff2","site-lib/fonts/70cc7ff27245e82ad414.ttf","site-lib/fonts/454577c22304619db035.ttf","site-lib/fonts/52ac8f3034507f1d9e53.ttf","site-lib/fonts/05b618077343fbbd92b7.ttf","site-lib/fonts/4bb6ac751d1c5478ff3a.woff2","site-lib/media/6155340132a851f6089e.svg","site-lib/media/2308ab1944a6bfa5c5b8.svg","site-lib/html/file-tree-content.html","site-lib/scripts/webpage.js","site-lib/scripts/graph-wasm.js","site-lib/scripts/graph-render-worker.js","site-lib/media/favicon.png","site-lib/styles/obsidian.css","site-lib/styles/global-variable-styles.css","site-lib/styles/main-styles.css"],"webpages":{"daily/1-7-25.html":{"title":"1-7-25","icon":"","description":"Today I have reached a huge milestone in this project. Through manually uploading and dumping memory, I have gotten the MSP430FR2433 (the 16kB chip) to perform the same step computation as my desktop simulator, such that the MD5 hash of the two state files are the same.When I left off <a data-tooltip-position=\"top\" aria-label=\"12-30-24\" data-href=\"12-30-24\" href=\"daily/12-30-24.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">last time</a>, I was going to work on the build toolchain side of things. I have now gotten the system to a point where, at least on Linux, the script should go from having no dependencies downloaded to having a .elf ready to flash. I need to have different logic at least for running the build tools on Windows, and possibly macOS too. I have not tested a complete run from no downloads to fully built, but I have tested the chain responsible for downloads and extraction and it works, at least on my machine.I ran into a challenge with the Call Frame Information (CFI) directives that LLVM outputs into the assembly again. TI's tools do not understand them and cause the assembler to error out. This is something that I ran into before while testing, but at the time I just deleted them manually. However, I had to make a way to do the same thing automatically. I created a custom step that takes in the LazyPath objects the build system uses and modifies the assembly file in place before it is copied to the output directory and put in the build chain. The step works fine, but does not play nice with Zig's cache system. If the step itself is not changed it works fine, but I ran into issues if I modified the step's code and didn't delete my cache. This would likely be solved by having different input and output files.Another feature of this build script is its ability to work with multiple MCUs without having to change the script itself. I set up a build option to switch between the 3 MCUs involved in this project. This option sets an enum value, which I then convert to a string and add directly into the arguments for GCC. To my knowledge, the argument mainly chooses the appropriate linker file.Speaking of linker files, adding them to the GCC include directory does not make them visible to GCC. I had to manually point GCC to the folder. Having to manually pass the folder enables me to make the custom ZIP file code that I modified from Zig's standard library simpler, but I have not done so yet. I also had to fall back to relying on tar to extract the files for Linux and macOS as TI compressed them using bzip2, which Zig does not have built in support for. Using the bzip2 library to do the decompression myself was an option, but not one that I wanted to spend time on.Now that I had my build system set up, I dove into working with the two Launchpads I had ordered. I started off with the larger MSP430FR2476. I first tried to use the included ezfet driver to talk to the board. Between issues that I will discuss next, and the fact that the driver itself is known to be experimental, it did not work. I then switched to using the tilib driver. This required me to download the library libmsp430.so for MSPDebug to use, which TI provides on their website. I will need to incorporate this into the build system at some point. I may play around with trying to build the library from source, but it would be much easier to use TI's prebuilt version. After learning how to point MSPDebug to the file and that the 32 bit version of the library would not work on my machine, I was able to talk to the device. MSPDebug told me that my device needed an update, so I added the flag to let it do so.The update got to ~90% before freezing for a few seconds, and then \"completed\". Trying to reopen the connection gave an error. I was probably worried that I had already bricked the device, and tried replugging the board. Eventually I was able to rerun the update, but the same thing happened. After many tries and a different USB cable, I did get the update to go through. The USB cable was not the issue though, as I was still running into issues with getting my system to reliably connect to the board. At first I though the issue was the voltage being supplied to the chip, but that was not it. It turns out that to reliably connect that you need to let the board be powered on for a while before you connect. I have not done experiments to find the exact time, but 30-60 seconds is probably fine.After I had gotten the large board to work, I wanted to try the small MSP430FR2433 board too. Like the other board, it needed a firmware update to work. In my haste to get the new board to work however, I had already forgotten the need to let the board remain powered on for a time before connecting to it. I ran into the same partial upgrade issue as before, except that this time the driver wasn't able to autorecover it. At some point I switched over to my Windows install and used Code Composer Studio to recover the board, which also updated the board's firmware for me.Going back to the larger launchpad, I used MSPDebug to flash my code onto the board and tried running it in the debugger. However, it was never reaching an infinite loop that I had set up. I went on a debugging hunt to try and find out why. To make a long story short, I found out that my code was getting reset by a watchdog timer that is automatically started on reset and must be disabled manually. I ended up figuring this out by reading TI's manual for the chip, but not before spending a lot of time manually using the debugger to step through the code, which must affect this timer differently.Once I had resolved my watchdog issue, I was able to get my code to run. However, I noticed it took ~20 seconds to go through the entire board. I mainly attributed this to the fact that the MCU defaults to running at 1MHz, and decided to get it to run at its maximum 16MHz. This took quite a bit of manual reading and googling to figure out, and I didn't get it right on the first try.The MSP430 MCUs that I use run their CPU off of a clock line called MCLK. MCLK can be sourced from a variety of inputs, but unless you want to run the CPU at &lt;50kHz you will need to source it from DCOCLKDIV. All of the chips that I am using have a digitally controlled oscilator (DCO) that is able to generate a much higher frequency clock signal from a lower frequency input, which in this case is 32768Hz clock. This frequency can either be internally generated by the chips reference oscillator (REFO) or an external crystal. Within each of the five DCO ranges on the chips that I'm using, the DCO can generate a wide range of frequencies. The specific frequency can be changed in software. However, the correct settings to achieve a certain frequency may change based on the chip's environment. With the use of the built in frequency locked loop (FLL), users do not need to worry about manually adjusting the DCO parameters themselves. All that you need to do is configure the output frequency you want as well as if you want to have the output frequency divided down from a higher frequency for more stability.Setting this up required doing a lot of hardware register manipulation. Zig actually has a feature called packed structs that makes tasks like this a lot easier. Packed structs let you reinterpret an integer as a series of fields that are allowed to have non-whole byte widths in a defined order.For example: here is the packed struct corresponding to how the register CSCTL2 is layed out:const ClockSystemControlRegister2 = packed struct(u16) { /// FLL Multiplier. FLLN: u10, _unused1: u2, /// FLL Divider. FLLD: u3, _unused2: u1,\n};\nI can then define a constant variable that points to one of these structures at the location of the register in memory:const CSCTL2: *volatile ClockSystemControlRegister2 = @extern(*volatile ClockSystemControlRegister2, .{ .name = \"CSCTL2\",\n});\nThe volatile keyword tells Zig that writes to this register may have side effects, and the use of @extern lets me reference the location of the register using the symbol list that TI provides in each chip's linker script. This way I do not have to hard code a selection between different addresses if they differ between the chips I use.\nCSCTL2 can be used just like a normal struct from this point:CSCTL2.FLLN = 487; // 32768 Hz * (487 + 1) is about 16MHz\nCSCTL2.FLLD = 0; // Disable divider\nMy first go at this kept resulting in the FLL maxing out the DCO and failing to stabilize. This is because I had the divider set to /2, which meant that the FLL was trying to achieve a frequency of 32MHz behind the scenes. Disabling the divider fixed the issue and I was able to run the step function in around a second. I also enabled FRAM wait states to prevent the MCU from resetting due to accessing FRAM too fast.After I had done this, I added code to turn off and on FRAM write protection before and after the step function. By default, writing to FRAM will be silently ignored. This is likely to prevent a bit flip or an incorrect write from destroying program code since there is no special process for writing to FRAM, unlike flash memory. Since the board lives in FRAM, I need to be able to write to there during program execution. After this change, I used MSPDebug to dump the board from memory into a file that should be equivalent to the state.bin the desktop simulator uses to save its state. I got the MD5 hash of the state on both the MSP430 and on the desktop after being stepped once and saw that the board on the MSP430 had not updated at all. After checking the assembly code for the MSP430, I realized why. I had marked the board const in order for the compiler to put it into FRAM, assuming that casting to remove the constant attribute would make it behave like a var. However, Zig optimized out writes to the board. I had a problem: if I marked the board as var the linker would fail, but marking it as const doesn't work either.I knew that the solution lie in the @export builtin in Zig that allows you to customize how Zig exports symbols from your code. Marking board as var and telling zig to place it in .rodata did not work as the linker would complain about the redefinition of .rodata to be writable. I then tried to inject my own section definition with a ; characted to comment out the incorrect output, but all of the special characters were escaped and it didn't work. After taking a look through the linker files, I found out that there is a special section called .persistent that seems to be just what I needed. After making the board var and telling Zig to place it there, I was able to get the match between the MSP430 and the desktop simulator that I had mentioned earlier.Now that this is done, I'm going to merge hal back into main. It definitely grew way beyond just a HAL, so it's high time to make a new branch. The first feature I plan on implementing is a loop/step reset mechanism. After a certain number of steps, or if a loop of a certain size on the board is detected, the board will be refilled with random data. I plan to do this by taking the CRC of the board, as the MSP430 processors have a built in CRC module. I also need to work on getting random data on the MSP430. My plan right now is to use a floating digital pin to get a bit of entropy at each step, and then use that entropy combined with the board state to seed one of the default Zig RNGs. After this is done, I will start working on the eInk module driver.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Build Toolchain","level":1,"id":"Build_Toolchain_0"},{"heading":"Getting Started With Launchpad","level":1,"id":"Getting_Started_With_Launchpad_0"},{"heading":"Running Faster","level":1,"id":"Running_Faster_0"},{"heading":"Writing to the Board","level":1,"id":"Writing_to_the_Board_0"},{"heading":"Next Steps","level":1,"id":"Next_Steps_0"}],"links":["daily/12-30-24.html"],"author":"","coverImageURL":"","fullURL":"daily/1-7-25.html","pathToRoot":"..","attachments":[],"createdTime":1738861547994,"modifiedTime":1738861547994,"sourceSize":11569,"sourcePath":"daily/1-7-25.md","exportPath":"daily/1-7-25.html","showInTree":true,"treeOrder":1,"backlinks":["project-outline.html","daily/2-4-25.html"],"type":"markdown"},"daily/1-8-25.html":{"title":"1-8-25","icon":"","description":"Quick note for myself on implementing the CRC so I don't forget.TI's manual says that the CRC module is 16 bits and uses the CRC-CCITT-BR implementation. Looking through Zig's standard library, I didn't find one by that name. I check the source for the file, which pointed me to a script that generated that file. That script got its information from a text file, which had a note at the top leading to <a data-tooltip-position=\"top\" aria-label=\"https://reveng.sourceforge.io/crc-catalogue/all.htm\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://reveng.sourceforge.io/crc-catalogue/all.htm\" target=\"_self\">this website</a>. This page does mention the algorithm, and gives two versions for MSB first (CRC-16/XMODEM) and LSB (CRC-16/KERMIT) first, both of which TI's implementation supports. However, the example given in the manual points toward another algorithm (CRC-16/MCRF4XX) which is the same as KERMIT execept for the seed (0xFFFF vs 0x0000).Another note for myself: the rationale for the new HAL redesign is based on cache misses being very rare for both the update code and the SPI interrupt (6.9 in the manual)","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"","fullURL":"daily/1-8-25.html","pathToRoot":"..","attachments":[],"createdTime":1738861544237,"modifiedTime":1738861544237,"sourceSize":971,"sourcePath":"daily/1-8-25.md","exportPath":"daily/1-8-25.html","showInTree":true,"treeOrder":2,"backlinks":[],"type":"markdown"},"daily/1-16-25.html":{"title":"1-16-25","icon":"","description":"I've spent the past few days working on the eInk display interface. This has been a very complicated task, requiring an expansion of the codebase as well as thinking about how to structure interrupts in order to make effective use of time. As of right now, the code should be able to enable the display, step the board while sending data to the display, refresh and shut down the display, before entering an infinite loop. However, this code is so complicated that there are probably a few bugs in it. I want to go over the new display code so that I can hopefully catch any errors before I begin trying everything out on actual hardware. Debugging issues like these will be pretty hard, so I want to try and stamp out any bugs beforehand.The code starts in the same way it has previously. The main function calls the common step function, which calls the platform specific preUpdate function. This function is where the magic starts. It starts off by disabling the watchdog timer and speeding up the CPU clock to 16MHz, the maximum. There is a slight modification to produce a submaster clock for the SPI module, but other than that it should be the same as before. We then run into the first new addition to the codebase, digital IO control.Since my last update, I have reorganized code that interacts directly with hardware registers. There is a msp430 folder inside of src with files for each module in module in the processor that I use. These are all re-exported in a msp430.zig file in the src directory, along with some commonly used assembly functions like a nop and global interrupt enable and disable.One of these modules is the digital IO system. I have taken advantage of Zig's compile time features to produce a system that turn calls to update the pin to single lines of assembly. In the file, there is a DigitalIO type function that takes in an enum of the available ports on the MSP430FR2433 and returns a custom type with functions that set the pins on that specific port. I then have another type function Pin that takes in one of these types and a pin number and produces functions that affect just that pin. Most of the functions are fairly standard: pin direction, pin mode, pin output, things like that. There is one more advanced function though: the waitForChange function. This function takes in a pin on a port and either the rising or falling edge of the signal. The function then enable the pin's interrupt and puts the CPU in LPM4 waiting for the transition to happen. Using the comptime system, each declared port exports its own interrupt handler that clears both the interrupt enable and interrupt flag registers of the port and returns the CPU to regular operation. This also makes sure that trying to use the function on pins in a port that doesn't support interrupts will cause a compile time error. This actually saved me from forgetting to switch pins around.I also caught an issue while writing this. I noticed that some interrupts were just calls to others, which messes up the stack. I added the reset functionality to the handler to force them to be separate.In this file I export the three ports on the chip, and in a pins.zig file I export all of the pins that the program uses. This allows me to change pin numbers and ports around without having to hunt through code.Going back to the main program flow, the preUpdate function resets all of the DIO ports to a safe state, before setting up the eUSCI module.SPI on these chips is handled by the \"enhanced universal serial communication interface\", or eUSCI module. These modules can be configured in one of multiple modes to handle various types of communication, including SPI, I2C, and UART. The file starts off with creating interfaces to the various registers needed for SPI control of eUSCI B, which is the only one that this project uses. Some are packed structs, others are plain integers.This file is also where initSPI lives. It starts off by placing the eUSCI module in a software reset state so its settings can be modified. It is then configured to match the signal that the display driver expects. One small issue is that the driver datasheet recommends that CS be pulsed in between bytes to prevent noise from interfering. Unless the module does this automatically, I don't see an easy way to implement this behavior. One important thing that is configured is an MSB first byte order. This is specified in the driver datasheet. However, we will use LSB later on to correct for how the board data is stored in FRAM.The pins for the eUSCI are then configured for the appropriate purpose, and the software reset is lifted. Back in the preUpdate function, the pin connected to the busy pin of the display driver is set to an input. The display is then initialized.This file contains all of the logic for setting up, refreshing, and powering down the display. Lots of the code there is base on Waveshare's example code for the display, so I added the licence notices for the files I used at the top. The file starts off with a few arrays of LUT data that are sent to the display later on. There are then a few functions that power off and refresh the display that will be covered later. The initialize function for the device is not very complicated. All it does is reset the device by toggling the reset pin. It used to also power up the device with a GPIO, but I went and checked the datasheet and found out that display can draw up to 40 mA. I plan on powering the device straight from 3V instead. After this, the function calls a function in the eUSCI file called setFetchData. And this is where things get complicated.The program need to send various commands and data to the display. It must do this by transmitting bytes over SPI while setting a select line high or low to indicate the kind of data being sent. While this is going on, the program is also working to advance the board to its next state. The program could do everything synchronously after the board is done updating, but by having the data being transmitted while the program is running we can take advantage of the time (64 cycles?) it takes to send a byte out. What makes this hard is that the microcontroller does not have a DMA on it. All of the data that we need to send must be manually copied by the CPU to the SPI module. This means that any code that is executing will be regularly interrupted to place a new byte into the SPI transmit buffer.Creating a system with all of this in mind took a while. I believe that my solution gives high performance while still being flexible.The first step in this process was figuring out how to make an interrupt in Zig in the first place. The linker expects interrupts to be functions exported to a special section. For many architectures, Zig has a built in interrupt calling convention that tells LLVM how to make the function behave in the correct manner. LLVM actually has a setting for MSP430 interrupts, but it is not implemented in the version of Zig that I'm using. This left me with two options\nAdd the MSP430 interrupt calling convention to Zig.\nUse inline assembly to make a regular function work as an interrupt.\nI acutally started out with option 1. I set up a development environment for Zig and got to work. The changes were actually fairly simple, and I tried to build them. I then realized that there is an <a data-tooltip-position=\"top\" aria-label=\"https://github.com/ziglang/zig/issues/21842\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://github.com/ziglang/zig/issues/21842\" target=\"_self\">unresolved issue</a> in the Zig complier that makes it impossible to change the code that handles calling conventions...at least until I went to check just now. I may try and get my changes to work, but for now I'm going to keep my code based on option #2.Option #2 is actually not as bad as I first thought. The main differences between a regular function and an interrupt are register save/restore and a special reti instruction. What I ended up doing is coding the interrupt as normal, building the assembly, and then manually checking to see which registers were used by the interrupt. I added assembly to manually save and restore these registers to and from the stack, as well as ending the function with a reti instruction.The SPI interrupt code lives in eUSCI.zig. It starts by using an inline assembly block to push the three registers used in the code to the stack. It then takes the first item from a global slice variable called to_send and copies it to the SPI transmit buffer. It then creates a new slice without that element and checks if it is empty. If it is not, it replaces to_send with the temporary slice. If it is empty, it calls the function pointed to by the fetch_data global variable. Having this fetch_data function allows the IRQ to get new data immediately when it runs out without having to wait for the main program to feed it more. One it returns, the interrupt checks if to_slice is still empty. This should only happen once the code is done sending the entire board to the display. If it is, it makes sure the CPU will wake up from LPM0 if it currently in that state. This will come into play later on. Finally, the interrupt restores registers and returns.Returning to the main program flow, the setFetchData function does two things. It replaces the current fetch_data value with the given function, and then runs that function. The function given by the display init function is called setupFetchData, and goes through the entire display configuration process. The function body is a state machine. It is a giant switch block, where each case increments a counter to move to the next case the next time the function is executed.There are 9 steps in the function, but many of them are similar in flow. Let's take a look at step zero, the one that will be ran from the main program. It starts by pulling the data/command line low to indicate a command byte, before sending the appropriate byte using a function called sendDataSync. This function copies the data to the transmit buffer and then busy waits until the eUSCI module is not busy anymore. This is not ideal, but:\nthere is no interrupt for this event, so going into LPM and getting woken up by the SPI module is not possible\nswitching to VLOCLK (a built in 10kHz clock) would overshoot as the transmission takes places in less time than the period of the clock\nslowing down MCLK is a problem because the SMCLK line that the SPI module is tied to is sourced from it\nthe correct way, using a timer to generate an interrupt, is not something I want to deal with at the moment.\nWe need to wait until all pending data has been transmitted because the next byte(s) transmitted will need to have the data/command line pulled high to mark them as data. This is a common pattern throughout this function.\nThis goes on for a few arguments, before a different pattern takes place. The variable that keeps track of the state is incremented, and a function from the eUSCI file called sendSlice is called with a slice full of data bytes that need to be sent. This function works similarly to the interrupt handler itself, attemping to add as many bytes as possible before setting to_send to the the slice with remaining bytes. Once this is done, setupFetchData enables the transmit SPI interrupt. From now on, all calls to the setupFetchData will be done from the interrupt handler.Back in the main preUpdate function, the global interrupt handler is enabled so that the transmit interrupt enable will take effect. From now until the the postUpdate function is called, the code behaves very similarly to before, with some minor differences that interact with another fetch_data function that we will talk about soon.The remainder of the cases in the switch statement are called in the interrupt. Cases 0-2 are fairly similar, only sending a few configuration bytes. Cases 3-7 are also similar, as they send larger arrays of LUT data to the display. In case 8, only one command byte is sent. The daa/command line is set to data, and the SPI module is put back into software reset. This is just to change the byte ordering to LSB. The program stores the board in a bitfield where the least significant byte is the left most pixel (7 6 5 4 3 2 1 0, 15 14 13 12 11 10 9 8). The display wants data where the most significant byte is the leftmost pixel (0 1 2 3 4 5 6 7, 8 9 10 11 12 13 14 15). We can avoid rotating the data around by just asking the eUSCI module to transmit LSB first. The display will interpret the bits MSB first and reverse the order for us. After doing this, it resets the counter variable to zero to prevent any undefined behavior should the function be called again, and calls setFetchData to change fetch_data to a new function, imageFetchData.imageFetchData is the handler responsible for feeding the interrupt with data to be shown on the display. It is fairly simple. Two global variables, lowest_sent and pending, are used to keep information about what data has been or is being transmitted and what data to send next, respectively. If they are ever equal, meaning that no new data is ready to send at the moment, the function sets a global stall flag and doesn't update to_send. This causes the interrupt handler to disable itself and wake the CPU from LPM0 if active. In addition, if the value of both variables is equal to the length of the bitset, another flag named complete is set. After these checks, the board is sliced between lowest_sent and pending and sent using sendSlice. pending is then copied to lowest_sent to make sure data is not retransmitted.The variable pending is updated by the functions markComplete and markAllComplete. markComplete increments pending by the number of bytes in one row of the board. markAllComplete sets pending to the length of the bitset that stores the board. In addition, they check if the stall flag has been set. If it has, they clear it and reenable the interrupt. As the stall flag is only set when space is available in the TX buffer yet there is no new data to transmit, this should cause an immediate interrupt.Once the board has been updated and any other steps are done, the common code calls hal.postUpdate. In the embedded version of the HAL, this takes care of refreshing and powering down the display and will eventually set up the MSP430 to go to sleep for a certain amount of time before repeating everything all over again. It starts by write protecting the FRAM as usual, before disabling interrupts. This is because the code needs to check if the complete flag has been set, and having the flag set after the check fails would cause a softlock. If the flag has been set, it continues. If not, it places the CPU in LPM0 while it waits for the SPI system to finish sending the remaining display data. The interrupt handler contains code to wake the processor from LPM0 if it detects it has no more data to transmit. By this point the entire board is made available, so this should only happen once all of the display data has been sent. After this, the program waits for any remaining data in the eUSCI module to be sent before switching the bit order back to MSB first. It then calls a function to get the display to refresh and actually display the image data. It starts off like normal, sending a command and data byte synchronously to trigger the refresh. The code then busy waits for about a millisecond (using a 10kHz clock), before shutting down the SPI module. This is to make sure that the SPI's need for a clock module does not interfere with the next step. By this time, the display should have set its busy line to low. The waitForChange function is then ran on the display's busy pin, saving power until it has finished the refresh and sets the busy line high. Once this has completed, the SPI is reenabled to issue the last command to put the display into deep sleep.After this, the step function returns and the program enters a spin loop as of right now.It's currently late as I'm writing this, so I plan to try out this code on hardware tomorrow. I did catch four issues by my count doing this check, so that's good. I don't expect this to work on the first try still, as there are so many moving parts here that something is bound to go wrong. The problem is that it will be hard to debug any issues involving the SPI connection without hardware tools. Debugging the software side of things will be hard, but possible.I have also realized that I am running out of time to get this project done in time for UW-Madison's career fair. It is less than a month away, and I do not have a working prototype yet. My plan is to begin work on the PCB design once the display works and add the remaining features while I wait for parts.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Initialization","level":1,"id":"Initialization_0"},{"heading":"<code>dio.zig</code>","level":1,"id":"`dio.zig`_0"},{"heading":"<code>eusci.zig</code>","level":1,"id":"`eusci.zig`_0"},{"heading":"<code>display.zig</code>","level":1,"id":"`display.zig`_0"},{"heading":"The SPI Interrupt System","level":1,"id":"The_SPI_Interrupt_System_0"},{"heading":"Getting Interrupts to Work in Zig","level":2,"id":"Getting_Interrupts_to_Work_in_Zig_0"},{"heading":"The SPI Interrupt","level":2,"id":"The_SPI_Interrupt_0"},{"heading":"<code>setupFetchData</code>","level":2,"id":"`setupFetchData`_0"},{"heading":"<code>imageFetchData</code>","level":1,"id":"`imageFetchData`_0"},{"heading":"<code>markComplete</code> and <code>markAllComplete</code>","level":2,"id":"`markComplete`_and_`markAllComplete`_0"},{"heading":"<code>postUpdate</code>","level":1,"id":"`postUpdate`_0"},{"heading":"Next Steps","level":1,"id":"Next_Steps_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"daily/1-16-25.html","pathToRoot":"..","attachments":[],"createdTime":1738643017010,"modifiedTime":1739210763856,"sourceSize":17032,"sourcePath":"daily/1-16-25.md","exportPath":"daily/1-16-25.html","showInTree":true,"treeOrder":3,"backlinks":[],"type":"markdown"},"daily/2-4-25.html":{"title":"2-4-25","icon":"","description":"It's been a while, hasn't it?In the 2+ weeks since my last note, I have gotten to the point where the ePaper display successfully updates with the next step on power up. All that is left to complete what I had originally planned as phase two is to add noise collection for RNG seeding and a RTC-based sleep and wake.Part of the reason this update is so late in arriving is that I put off even trying out my new code because I did not look forward to fixing the inevitable errors with it. There was a fair share of errors, but in the end it only took about a week to a week and a half to get things working. This delay means that I will not be able to actually give out PCB business card at the career fair, now less than a week away. I still plan to show off the progress that I have made, as the internships I would be applying for would probably be more firmware side anyways.I want to go through the process from the first try to the current state of the project. Lots of the specifics have probably slipped my mind at this point, but I will try my best to recall the process.At some point I set up my ePaper display and Launchpad again and tested out my new code for the first time. Unsurprisingly, it didn't work the first try. I used MSPDebug to try and figure out where the program was going wrong. I ended up seeing behavior similar to when I was first getting started with the Launchpad and the watchdog timer was resetting the board (see <a data-tooltip-position=\"top\" aria-label=\"1-7-25\" data-href=\"1-7-25\" href=\"daily/1-7-25.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">here</a>). My code would jump back, seemingly for no reason, to code near the main method of the program. After poking around for a while, I realized that my interrupt handlers were not being pointed to from the interrupt table. I was trying to export the function directly to the interrupt handler section, when I really needed to export a function pointer to that section. This was the first issue I fixed to get the software on the board to run correctly.Based on commit history and what I can remember, I was still running into a reset issue. To fix this, I tried placing infinite spin loops at various points in my code to see if the processor reached them or not. I believe I tracked down the issue to the SPI handler's behavior towards the end of execution. After looking through the SPI handler's code, I decided to add extra checks to ensure that zero length slices would never be accessed. After this, I believe my code ran to the postUpdate() function, but the display was still not updating.At this point, I was wondering why my board was seemingly sending over all of the correct data to the display yet not causing it to update. At some point I ended up deploying Waveshare's example code for the display to an Arduino Uno I got for one of my classes to test out the display, which did work. Now that I knew that the display wasn't fried, I went back to seeing what was wrong with the Launchpad setup.At some point in this whole debugging process, even if not exactly here, I discovered that at least one pin was not connected correctly. Until that point, there is no way my code could have worked. I remember realizing that the reset line from the display was connected to the literal (CPU) reset pin on the Launchpad instead of its proper digital I/O. Even after correcting this, the code still did not work.<br>At this point I assumed some sort of error in setting up the display. I did two things to try and resolve this. The first was to enable the eUSCI's clock divider to slow down the clock to 1MHz. The original 2MHz was towards the upper limit of what the board could handle, so slowing it down might have helped with timing issues and noise from the long wires on the display connector. The second was to switch from pushing new data on the TX interrupt to pushing new data on the RX interrupt. This is so that the chip select line is deselected in between bytes. This is recommended by the display driver's datasheet. This inspiration mainly came from a <a data-tooltip-position=\"top\" aria-label=\"https://e2e.ti.com/support/microcontrollers/msp-low-power-microcontrollers-group/msp430/f/msp-low-power-microcontroller-forum/18771/msp430-spi-communication\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://e2e.ti.com/support/microcontrollers/msp-low-power-microcontrollers-group/msp430/f/msp-low-power-microcontroller-forum/18771/msp430-spi-communication\" target=\"_self\">TI E2E form post</a> that explained that:\nSPI is always transmitting and receiving, even if one of those is junk data\nthe receive interrupt is equivalent to transmission being completely done\nBut even after this change the code still didn't work...until I set a breakpoint in some of the code dealing with waiting for the reset signal.<br>\n<img alt=\"first_img.jpg\" src=\"img/first_img.jpg\" target=\"_self\">\nThis was something I had been looking forward to for a while. It came in such an unexpected place too. However, needing a debugger attached to make your program work is not the best look, so the next order of business was to try and make it work without needing a debugger. I went from a variety of theories on what was causing the behavior. Here is a rough order: Setting a breakpoint causes the display to work\nResetting the board using the debugger causes the display to work.\nResetting the board without power cycling the display causes the display to work\nResetting the board while the display is powered, even after a power cycle, causes the display to work.\nBack to three?\nI don't know anymore...\nAfter taking a look at the reset signal with an oscilloscope, I saw that the busy signal would not trigger at all (or for very small amounts of time) when the display failed to refresh. However, this was not an error in sending data, as I had gotten the display to refresh before. My current guess as to what was wrong with the display is that the driver chip is very particular about its startup sequence and resetting the board must have had some effect on the chip that made it work. My solution was basically to perform a reset myself in code. Not of the whole program, but just the driver chip. I duplicated the startup sequence code, and also adjusted all of the busy waits (which probably do not help either) to their minimum time. Amazingly, this seems to work. Plugging in the board from a cold start successfully steps the program. In fact, I may have broken the program when resetting from the debugger. However, using LPM3.5 is essentially a cold start for the CPU. If this is the case it will hopefully not be a huge problem.\nI will need to finish up the last few features, but after that I will be done with what was originally Stage 2 on my project outline. I will also start writing up more proper technical details for potential employers to look over. I should also go back through my code and make sure it is well commented.The hardest part of this will be getting everything into a semi-presentable form. What I may do is get the program to work on the MSP430FR2476 board. This is because it has a coin cell battery holder and because I don't mind permanently soldering wires to it as the code runs just fine on the MSP430FR2433 board. There's a very small chance that I make a 3D printed enclosure for this, but I'm no mechanical engineer and time is tight.There is also the issue that the build script for this program does not download TI's libmsp430.so driver for MSPDebug, and does not work correctly on Windows or Mac. I may fix the issue for Linux, and maybe Windows if time allows, but this is low on my priority list at the moment.I also need to make sure that this project gets uploaded to GitHub and that the people I talk to have a means to get the code and documentation (if you are reading this, it worked).","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Fixing Software","level":1,"id":"Fixing_Software_0"},{"heading":"Cooperating with Hardware","level":1,"id":"Cooperating_with_Hardware_0"},{"heading":"Next Steps","level":1,"id":"Next_Steps_0"}],"links":["daily/1-7-25.html"],"author":"","coverImageURL":"img/first_img.jpg","fullURL":"daily/2-4-25.html","pathToRoot":"..","attachments":["img/first_img.html"],"createdTime":1739132899649,"modifiedTime":1739132899650,"sourceSize":7493,"sourcePath":"daily/2-4-25.md","exportPath":"daily/2-4-25.html","showInTree":true,"treeOrder":4,"backlinks":["project-outline.html"],"type":"markdown"},"daily/2-9-25.html":{"title":"2-9-25","icon":"","description":"I have added the last few features to the project that I will bring to the career fair. These are the ADC \"random\" seeding and the five minute RTC delay. I have also figured out a solution for making the board portable.The ADC seeding feature was not too hard to add. The registers were pretty easy to implement, and the process for getting data from the ADC wasn't bad either. I have followed the advice I heard online and sampled the last bit as it has the most noise and shifted it in to a virtual u256 that is then cast to an array of four u64s used to seed the PRNG. The two difficulties I ran into were a problem with the ADC conversion never finishing and casting the u256 to the [4]u64 array.The former was caused by me triggering the ADC conversion using a software bit and how doing that interacts with a signal controlling the ADC sampling period. Normally, the ADC will sample for as long as the signal that tells it to start a conversion is asserted. Since I used a software register to start the conversion, the signal was not being asserted for long enough and the conversion never finished, leading to an infinite waiting loop. I had to change a setting in the ADC module to instead wait for a predetermined amount of clock cycles after an input pulse. This fixed the issue.The next feature I needed to add was the five minute delay before resetting the board and moving on to the next step. I am doing this using the MCU's RTC module and LPM3.5, which is designed for this task. To enter it, you need to prepare the chip to enter by resetting/disabling modules, setting certain registers, and entering a normal sleep mode. Interestingly, you do not enable the global interrupt enable unlike other sleep modes. This feature was harder to add than the ADC. I kept running into lockup issues like I had in the past. I tried things like busy waiting instead of using an interrupt to wait for the display to finish and switching the clock to 2MHz to avoid a potential bug in the MCU itself. I ended up figuring out that it was likely the connection to the debugger itself that was causing the problems, as the code I was working on ran fine once I ran it without a debugger connected.The next issue I ran into was that the clock source I am using is not the most accurate. Orginally, I had planned to use the dedicated 32kHz crystals on the Launchpads to clock the RTC module. I knew that on the MSP430FR2433 board that the crystal was not connected by default as it shared pins with digital I/O. However, this was also the case for the FR2476 board as well, which I am using for the demo. I could have enabled it by moving the zero ohm resistors over, but I didn't because I did not look to see if I could find some of the heat protection tape and I didn't want to try moving the resistors without the tape over the other components. This leaves the onboard VLO as the only other clock source that works during LPM3.5. According to the datasheet, it should have a 10kHz frequency. In reality, it likely varies based on manufacturing and environmental conditions. I found some values for the RTC counter that get times close to 5 minutes, and set them based on the CPU being built for.The need to change values based on the CPU being used meant that I had to add a way to get the CPU being used to my code. This would also be useful for fixing another issue that I was running into. In the linker script for the MSP430FR2433, the section for the eUSCI interrupt handler is called __interrupt_vector_usci_b0, while in the linker script for the MSP430FR2476 it is called __interrupt_vector_eusci_b0. In the past I was just changing the value whenever I wanted to build for a different board, but that is a non-solution. I took a look at <a data-tooltip-position=\"top\" aria-label=\"https://ziglang.org/learn/build-system/#conditional-compilation\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://ziglang.org/learn/build-system/#conditional-compilation\" target=\"_self\">this example</a> from the Zig website and borrowed it to add pass a variable to my project of the enum type I used to define the CPU types earlier. I then use switch statements to run code or execute values based on this enum.In addition to finishing up the software part of the project for now, I also have a semi-presentable hardware solution. It's no business card like I had originally planned, but it will be good enough to give employers an idea. I ended up going with the plan of soldering the display connector directly to the MSP430FR2476 Launchpad. This gives me the benefit of having a built in coin cell battery holder.I will admit that I had a lot of \"help\" (having it done for me) in actually unsoldering the headers that were already on the board. While I was trying to desolder the headers in UW-Madison's maker lab, I asked someone for help who pointed me to the desoldering irons they had at the lab. I had some success myself with the desoldering iron, but I didn't do a great job and ended up with a lot of semi-filled in through holes. I asked the person from earlier for help, who went to the wood shop and got an older man, likely a professor, who was an expert at this kind of thing. He patiently helped me by doing half of the headers for me. I did learn how to fix the errors I had made previously, so I did learn something. He taught me to remove solder using the desoldering iron that you sometimes have to add solder and flux first to give the desoldering iron enough to work with.<br>After this, I went over to Formula SAE's shop to do the other half of the headers myself with their equipment. I got started on using the desoldering iron at their shop, when the electrical lead <a data-tooltip-position=\"top\" aria-label=\"https://www.linkedin.com/in/alexander-quilliam-627831248/\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.linkedin.com/in/alexander-quilliam-627831248/\" target=\"_self\">Alex Quilliam</a> saw me and had a better idea. He just got out the hot air gun and blasted the whole bank of header pins while I pulled the header out. This worked pretty well, leaving only two of the header contacts remaining. One was pretty easy to remove. The other was not. It was connected to a ground pin, which, according to the professor, didn't have proper thermal relief. This made it a pain to desolder. On Saturday I spent a lot of time trying to remove the solder from it, but to no avail. Coming to my aid yet again, Alex gave it a shot. It turns out that I was too reluctant to heat up the board. He held the iron on the through hole for a few tens of seconds with solder wick to finally remove it.I took a header from a pack of JST headers I had ordered from Amazon, not knowing that the eInk came with one included in the box, cut its leads, and soldered them into the Launchpad. I will just glue or tape the e-Ink breakout to the back of the Launchpad and take that.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"ADC Seeding","level":1,"id":"ADC_Seeding_0"},{"heading":"RTC Based Sleep Mode","level":1,"id":"RTC_Based_Sleep_Mode_0"},{"heading":"Build Options","level":1,"id":"Build_Options_0"},{"heading":"Hardware","level":1,"id":"Hardware_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"daily/2-9-25.html","pathToRoot":"..","attachments":[],"createdTime":1739137443141,"modifiedTime":1739152347263,"sourceSize":6647,"sourcePath":"daily/2-9-25.md","exportPath":"daily/2-9-25.html","showInTree":true,"treeOrder":5,"backlinks":["project-outline.html"],"type":"markdown"},"daily/11-27-24.html":{"title":"11-27-24","icon":"","description":"Started to work on the simulator tonight. I plan to write more code and docs on the bus tomorrow. In the meantime, I wanted to save this very helpful link that I borrowed a lot of code from.<a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.reddit.com/r/raylib/comments/hcglzh/c_reasonable_performance_pixelbypixel_display/?utm_source=share&amp;utm_medium=web3x&amp;utm_name=web3xcss&amp;utm_term=1&amp;utm_content=share_button\" target=\"_self\">https://www.reddit.com/r/raylib/comments/hcglzh/c_reasonable_performance_pixelbypixel_display/?utm_source=share&amp;utm_medium=web3x&amp;utm_name=web3xcss&amp;utm_term=1&amp;utm_content=share_button</a><br><a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://archive.is/eVJZp\" target=\"_self\">https://archive.is/eVJZp</a>","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"","fullURL":"daily/11-27-24.html","pathToRoot":"..","attachments":[],"createdTime":1733290044951,"modifiedTime":1733290044951,"sourceSize":400,"sourcePath":"daily/11-27-24.md","exportPath":"daily/11-27-24.html","showInTree":true,"treeOrder":6,"backlinks":[],"type":"markdown"},"daily/11-30-24.html":{"title":"11-30-24","icon":"","description":"As of today I have coded what I think is an accurate simulator for a finite board version of Conway's Game of Life. The actual version specifies an infinite board, but this is close enough. I should implement unit tests at some point to make sure everything is simulated correctly, especially with regards to the literal edge cases of board wraparound. This checks off the first two goals on the <a data-href=\"Project Outline\" href=\"project-outline.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Project Outline</a>, with the third having significant progress.<br>First, I will give an overview of the whole system. The program relies on <a data-tooltip-position=\"top\" aria-label=\"https://www.raylib.com/\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.raylib.com/\" target=\"_self\">raylib</a> for graphics functions, with the <a data-tooltip-position=\"top\" aria-label=\"https://github.com/Not-Nik/raylib-zig\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://github.com/Not-Nik/raylib-zig\" target=\"_self\">raylib-zig</a> bindings being used. It's only utilized in the program's main function, which mainly sets up the raylib window, establishes necessary memory, and runs an update loop. Inside the update loop, the board is stepped one tick and its bits are then translated into a byte-sized framebuffer to be drawn to the screen. This can be done on a keypress or every frame. All functionality related to the state update is in the function updateBoard.<br>The entire state of the board, contained in the variable board, is an array of bytes with one bit allocated for each cell on the game board. I learned about similar techniques like bitsets from the website <a data-tooltip-position=\"top\" aria-label=\"https://eieio.games/blog/scaling-one-million-checkboxes/#toc:the-original-architecture\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://eieio.games/blog/scaling-one-million-checkboxes/#toc:the-original-architecture\" target=\"_self\">One Million Checkboxes</a>, more specifically the developer's writeup about the site (really watching a <a data-tooltip-position=\"top\" aria-label=\"https://youtu.be/0XKYMt5mGpQ?si=c1sSrQkxWAEILaKM&amp;t=376\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://youtu.be/0XKYMt5mGpQ?si=c1sSrQkxWAEILaKM&amp;t=376\" target=\"_self\">video</a> of someone else covering it). Using such data structures allows maximizing the limited storage available on microcontrollers. Without using one, storing the entire board as an array of one-byte boolean values would require either a microcontrollers with a large amount of persistent memory or an external memory chip. The downside is that doing anything requires large amount of bitwise operations. However, these operations are some of the fastest for a CPU to execute, so this is OK. A slice, which to my understanding are just pointers into an array with a length attached, along with the width and height of the bitmap, are all that is passed into updateBoard.updateBoard is not a very complicated function. It essentially just loops over each row of the board and ticks it one step forward before saving it back to the bitfield and moving one row down. It starts by saving a copy of the first row to be used when computing the final row of the board. For the screen I'm predicting to use (which will be explained later), one row is 360 pixels, or 45 bytes. The microcontroller I'm looking at has 4kB RAM available, so there should be no issue saving that. In addition, another row length array is initialized to hold the top row of pixels. This is to enable each updated row to be immediately written back to the array containing the board. Two slices are also created to hold references to the active and bottom rows. The last two row updates are broken out of the loop to deal with the special case of the bottom row without needing a branch instruction to be evaluated every loop.The real core of the program is the function stepRow. Its job is to take three slices, each representing one row on the board, top, middle, and bottom. Since the next state of any cell is only dependent the cell and its neighbors, this information is enough to tell us the next state of each cell in the middle row. The function loops over each cell, performing this series of tasks:\nBased on a table lookup, set a certain bit in a storage byte.\nOnce the byte is full, store it into the bitset.\nLoad a column into the lookup byte (this will be explained shortly).\nThe lookup byte is how the program actually determines the next state of the cell. It relies on two pregenerated bitsets made by Zig's comptime execution features. Remember how the next state of each cell only depends on the current states of that cell and its neighbors? On a 2D grid, each cell has eight neighbors, one for each bit in a byte. At comptime, two 32 byte, or 256 bit, arrays are generated. This means that any byte is a valid index into this bitset. The value at each index corresponds to the next state of the cell given the states of neighbors indicated by the byte. Since the rules for a cell differ based on whether the cell is alive or dead, two tables are needed. Now that I think about it, this could be improved by having one table with a nine bit index, the 9th bit being the state of the cell being evaluated. This would massively simplify the logic needed to shift in a new column, requiring no bitwise rotate operations that do not get translated down into a single instruction (even though both x86 and MSP430 both have an instruction to do so). It would also cut down one of two uses of if statements in the updateBoard process. I will need to implement this tomorrow and compare the performance.As the code is implemented now though, an if statement is used to determine which table to lookup from. The only remaining issue, and one of the biggest challenges I faced during this step (and which a 9-bit lookup would have made a lot easier), is figuring out how to pack the 8 neighboring cells into a byte in such a way that makes adding in a new row easy.At first I thought about using a lllmmrrr byte order, but realized that this would take many instructions to add new byte. Again, I now think that there may have been a way to make this byte order work, but since I am already tearing up this system, there is no need to go into further mistaken detail.The byte order that is currently being used is a lllrrrmm byte order. The process for shifting in four new bits (because we need to recover the old middle cell) is as follows.\nShift left by three. rrrmm000\nRotate left by one. rrmm000r\nClear the last four bits by ANDing with 0xF0. rrmm0000\nFill in the four bits as follows. rrmm(n)(n)(n)(n) Bit three: old middle cell\nBit two: right middle\nBit one: right top\nBit zero: right bottom Rotate left by two. mm(n)(n)(n)(n)rr\nThis process is done by two functions, shiftInRight and shiftInRightOverflow. The latter is only used in situations in which getting the old middle cell involves wrapping around the board. The stepRow function calls one of these two for each column of three cells to add it to the lookup byte and discard the leftmost row, effectively moving the right one column at a time. Besides two small helper functions, that is everything in the program.The first major issue I ran into was the output of the simulator looking similar to this:<br>\n<img alt=\"Pasted image 20241130232126.png\" src=\"img/pasted-image-20241130232126.png\" target=\"_self\">\nNote the alternating lines of white and black. While some versions of this error had a narrow region of some cellular-autonoma-like activity, most of the screen was glitched out. While I was troubleshooting, I noticed that the lines could be interpreted as an alternating binary sequence. Once such sequence could be 0xAA, 10101010, which just so happens to be the value that Zig fills any uninitialized value with in debug mode. There were a lot of other signs that pointed to this:\nThe lines going away when compiled in a mode that turned off this safety feature.\nGDB showing a slice of memory full of 0xAA values\nWhat eventually led me to see the issue was to print the index that was being written to each time a new byte was saved. I realized that bytes were not being saved correctly, leaving many locations undefined and with a value of 0xAA. This was due to using the lookup variable instead of the loop counter in the check for whether or not to save the byte. Once it was changed to the correct variable, the program worked much better.\nHowever, there was still an issue. Although the simulator looked mostly correct, I noticed some behavior that did not match the rules of Conway's Game of Life. For example, a vertical line of two cells was persisting forever instead of both cells dying in one step. In debugging this, I printed out cell state, the lookup byte used to find the next cell's state, and the result of the lookup. What I discovered was that each lookup was returning the correct value for the given state, but that the states did not line up with what was actually on the board. I noticed that the problem was that the bits corresponding to the left column would have incorrectly set bits. After thinking about it for a while, I realized that the method I had been using to shift new bits into the lookup byte was incorrect. Previously, I was looking in column while shifting in column for the central cell that was not included in the last lookup. However, if column is the column to the right of the area currently in the lookup byte, the column with the desired cell would be column . After changing my code to reflect this, the simulator runs as desired to my knowledge. I should implement tests to verify that everything works correctly, as I disabled some of the tests I had previously written after fixing this issue.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Overview","level":1,"id":"Overview_0"},{"heading":"Problem 1: Corrupted Mess","level":1,"id":"Problem_1_Corrupted_Mess_0"},{"heading":"Problem 2: Unknown Rules","level":1,"id":"Problem_2_Unknown_Rules_0"}],"links":["project-outline.html"],"author":"","coverImageURL":".","fullURL":"daily/11-30-24.html","pathToRoot":"..","attachments":["img/pasted-image-20241130232126.html"],"createdTime":1733290044951,"modifiedTime":1737172718967,"sourceSize":9155,"sourcePath":"daily/11-30-24.md","exportPath":"daily/11-30-24.html","showInTree":true,"treeOrder":7,"backlinks":["project-outline.html","zig.html","daily/12-14-24.html"],"type":"markdown"},"daily/12-3-24.html":{"title":"12-3-24","icon":"","description":"On Sunday, I added in the 9-bit lookup table that I had mentioned previously, along with some unit tests. I assumed that the nine bit lookup would be faster, as it would have simpler shift logic and avoid a branch for each pixel to choose between two tables. However, this may not be the case.Starting from commit ea0e51a3, I replaced the contents of the main() function with the following:// size of board and window\nconst width = 360;\ncomptime { std.debug.assert(width % 8 == 0); // this makes copying rows much easier\n}\nconst height = 240; var board: [(width * height + 7) / 8]u8 = undefined;\nvar rng = std.rand.DefaultPrng.init(std.crypto.random.int(u64));\nrng.fill(&amp;board); var accum: u128 = 0;\nfor (0..10000) |_| { const t0 = std.time.nanoTimestamp(); updateBoard(&amp;board, width, height); const t1 = std.time.nanoTimestamp(); accum += @intCast(t1 - t0);\n}\nstd.debug.print(\"10000 steps took {d}ns, avg {d:.3}ns\\n\", .{ accum, @as(f64, @floatFromInt(accum)) / 10000.0 });\nI then built and ran the code with zig build -Doptimize=ReleaseFast run, and got the following:10000 steps took 2522818969ns, avg 252281.897ns\nI then stashed my changes and went back to commit 03b5bdb3 when the code had two tables and replaced main with the same code from before. After building using the same command, I got this:10000 steps took 1885709600ns, avg 188570.960ns\nThat is a speedup of about 25% compared to the slower speed! I ran the test on each version five times to get multiple trialsOld:New:This isn't the most accurate test, as the kernel and background processes have an impact on this number. I did have a web browser with a few tabs and music in the background, but these were present (with maybe one tab of difference) in both sets of tests. However, it is clear that the old solution is much faster than the new one, even though I thought the new one would be an improvement. Why?My initial guess would be that the degraded performance has something to do with the use of u9 in shiftInRight(). Here it is for reference:pub fn shiftInRight(lookup: u9, row: []const u8, top: []const u8, bottom: []const u8, col: usize) u9 { var newLookup = lookup; newLookup &lt;&lt;= 3; newLookup |= (bitmapGet(top, col) &lt;&lt; 2); newLookup |= (bitmapGet(row, col) &lt;&lt; 1); newLookup |= (bitmapGet(bottom, col)); return newLookup;\n}\nI don't know much about x86 assembly off of the top of my head, but there may be special instructions optimized for operating on smaller units of data instead of a full 64 bits. In addition, nine bits is not a standard bit width. LLVM may be adding in extra code to make it appear as though the value is truly nine bits. If this is the case, it may be solved by expanding to a standard 16 bits and one extra AND instruction to mask any bits higher than bit 9.To explore further, I went to <a data-tooltip-position=\"top\" aria-label=\"https://godbolt.org/\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://godbolt.org/\" target=\"_self\">Compiler Explorer</a> to dig into what LLM was producing for assembly for both sets of programs. I started off with the new version, using the following code:const std = @import(\"std\"); pub fn bitmapGet(bm: []const u8, idx: usize) u8 { return (bm[idx / 8] &gt;&gt; @truncate(idx &amp; 0x7)) &amp; 0x1;\n} pub fn shiftInRight(lookup: u9, row: []const u8, top: []const u8, bottom: []const u8, col: usize) u9 { var newLookup = lookup; newLookup &lt;&lt;= 3; newLookup |= (bitmapGet(top, col) &lt;&lt; 2); newLookup |= (bitmapGet(row, col) &lt;&lt; 1); newLookup |= (bitmapGet(bottom, col)); return newLookup;\n} pub fn main() anyerror!void { var field: [8]u8 = undefined; var rng = std.rand.DefaultPrng.init(std.crypto.random.int(u64)); rng.fill(&amp;field); var lookup = rng.random().int(u9); lookup = shiftInRight(lookup, field[1..2], field[0..1], field[2..3], 4);\n}\nThe usage of random is to prevent the compiler from optimizing away any operations by making the inputs to the function unpredictable. Here is the x86 assembly corresponding to the shiftInRight function in the new version:example.shiftInRight:\n.Lfunc_begin34: .loc 51 7 0 .cfi_startproc push rbp .cfi_def_cfa_offset 16 .cfi_offset rbp, -16 mov rbp, rsp .cfi_def_cfa_register rbp sub rsp, 144 mov qword ptr [rbp - 136], rcx mov rax, rdx mov rdx, qword ptr [rbp - 136] mov qword ptr [rbp - 128], rax mov eax, edi mov rdi, qword ptr [rbp - 128] mov r10w, ax mov rax, qword ptr [rbp + 24] mov qword ptr [rbp - 120], rax mov rcx, qword ptr [rbp + 16] mov rax, rdi mov qword ptr [rbp - 112], rax mov rax, rsi mov qword ptr [rbp - 104], rax mov rax, r8 mov qword ptr [rbp - 96], rax mov rax, rdx mov qword ptr [rbp - 88], rax mov rax, rcx mov qword ptr [rbp - 80], rax mov rax, r9 mov qword ptr [rbp - 72], rax\n.Ltmp563: .loc 51 7 102 prologue_end mov ax, r10w and eax, 511 mov word ptr [rbp - 58], ax mov qword ptr [rbp - 48], rdi mov qword ptr [rbp - 56], rsi mov qword ptr [rbp - 32], r8 mov qword ptr [rbp - 40], rdx mov qword ptr [rbp - 16], rcx mov qword ptr [rbp - 24], r9 .loc 51 8 5 mov word ptr [rbp - 2], ax .loc 51 9 5 mov ax, word ptr [rbp - 2] mov word ptr [rbp - 60], ax mov al, 1\n.Ltmp564: .loc 51 9 5 is_stmt 0 test al, al jne .LBB34_2 jmp .LBB34_3\n.Ltmp565:\n.LBB34_1: .loc 51 0 5 mov rdx, qword ptr [rbp - 120] mov rsi, qword ptr [rbp - 96] mov rdi, qword ptr [rbp - 88] mov cx, word ptr [rbp - 60] .loc 51 9 5 mov ax, cx and eax, 63 shl eax, 3 mov word ptr [rbp - 2], ax .loc 51 10 5 is_stmt 1 mov ax, word ptr [rbp - 2] mov word ptr [rbp - 142], ax .loc 51 10 28 is_stmt 0 call example.bitmapGet mov cx, word ptr [rbp - 142] mov rdi, qword ptr [rbp - 104] mov rsi, qword ptr [rbp - 112] mov rdx, qword ptr [rbp - 120] .loc 51 10 39 shl al, 2 movzx eax, al or cx, ax mov ax, cx and eax, 511 mov word ptr [rbp - 2], ax .loc 51 11 5 is_stmt 1 mov ax, word ptr [rbp - 2] mov word ptr [rbp - 140], ax .loc 51 11 28 is_stmt 0 call example.bitmapGet mov cx, word ptr [rbp - 140] mov rdi, qword ptr [rbp - 72] mov rsi, qword ptr [rbp - 80] mov rdx, qword ptr [rbp - 120] .loc 51 11 39 add al, al movzx eax, al or cx, ax mov ax, cx and eax, 511 mov word ptr [rbp - 2], ax .loc 51 12 5 is_stmt 1 mov ax, word ptr [rbp - 2] mov word ptr [rbp - 138], ax .loc 51 12 28 is_stmt 0 call example.bitmapGet mov cx, word ptr [rbp - 138] movzx eax, al or cx, ax mov ax, cx and eax, 511 mov word ptr [rbp - 2], ax .loc 51 13 5 is_stmt 1 mov ax, word ptr [rbp - 2] .loc 51 13 5 epilogue_begin is_stmt 0 add rsp, 144 pop rbp .cfi_def_cfa rsp, 8 ret\nI then used this to check the assembly for the older versionconst std = @import(\"std\"); pub fn bitmapGet(bm: []const u8, idx: usize) u8 { return (bm[idx / 8] &gt;&gt; @truncate(idx &amp; 0x7)) &amp; 0x1;\n} pub fn shiftInRight(lookup: u8, row: []const u8, top: []const u8, bottom: []const u8, col: usize) u8 { var newLookup = lookup; newLookup &lt;&lt;= 3; newLookup = std.math.rotl(u8, newLookup, 1); newLookup &amp;= 0xF0; newLookup |= (bitmapGet(row, col - 2) &lt;&lt; 3); newLookup |= (bitmapGet(row, col) &lt;&lt; 2); newLookup |= (bitmapGet(top, col) &lt;&lt; 1); newLookup |= (bitmapGet(bottom, col)); newLookup = std.math.rotl(u8, newLookup, 2); return newLookup;\n} pub fn main() anyerror!void { var field: [8]u8 = undefined; var rng = std.rand.DefaultPrng.init(std.crypto.random.int(u64)); rng.fill(&amp;field); var lookup = rng.random().int(u8); lookup = shiftInRight(lookup, field[1..2], field[0..1], field[2..3], 4);\n}\nThis produced the following assembly:example.shiftInRight:\n.Lfunc_begin34: .loc 51 7 0 .cfi_startproc push rbp .cfi_def_cfa_offset 16 .cfi_offset rbp, -16 mov rbp, rsp .cfi_def_cfa_register rbp sub rsp, 160 mov qword ptr [rbp - 152], rcx mov rax, rdx mov rdx, qword ptr [rbp - 152] mov qword ptr [rbp - 144], rax mov eax, edi mov rdi, qword ptr [rbp - 144] mov rcx, qword ptr [rbp + 24] mov qword ptr [rbp - 88], rcx mov rcx, qword ptr [rbp + 16] mov r10, rdi mov qword ptr [rbp - 136], r10 mov r10, rsi mov qword ptr [rbp - 128], r10 mov r10, r8 mov qword ptr [rbp - 120], r10 mov r10, rdx mov qword ptr [rbp - 112], r10 mov r10, rcx mov qword ptr [rbp - 104], r10 mov r10, r9 mov qword ptr [rbp - 96], r10\n.Ltmp563: .loc 51 7 102 prologue_end mov byte ptr [rbp - 57], al mov qword ptr [rbp - 48], rdi mov qword ptr [rbp - 56], rsi mov qword ptr [rbp - 32], r8 mov qword ptr [rbp - 40], rdx mov qword ptr [rbp - 16], rcx mov qword ptr [rbp - 24], r9 .loc 51 8 5 mov byte ptr [rbp - 1], al .loc 51 9 5 mov al, byte ptr [rbp - 1] mov cl, 3 shl al, cl mov byte ptr [rbp - 1], al .loc 51 10 30 movzx edi, byte ptr [rbp - 1] call math.rotl__anon_7265 mov cl, al mov rax, qword ptr [rbp - 88] mov byte ptr [rbp - 1], cl .loc 51 11 5 mov cl, byte ptr [rbp - 1] and cl, -16 mov byte ptr [rbp - 1], cl .loc 51 12 5 mov cl, byte ptr [rbp - 1] mov byte ptr [rbp - 73], cl .loc 51 12 38 is_stmt 0 sub rax, 2 mov qword ptr [rbp - 72], rax setb al jb .LBB34_1 jmp .LBB34_2\n.LBB34_1: movabs rdi, offset __anon_1620 mov esi, 16 xor eax, eax mov edx, eax movabs rcx, offset .L__unnamed_1 call example.panic\n.LBB34_2: .loc 51 0 38 mov rsi, qword ptr [rbp - 136] mov rdi, qword ptr [rbp - 128] mov rdx, qword ptr [rbp - 72] .loc 51 12 28 call example.bitmapGet mov rdi, qword ptr [rbp - 128] mov rsi, qword ptr [rbp - 136] mov rdx, qword ptr [rbp - 88] mov cl, al mov al, byte ptr [rbp - 73] .loc 51 12 43 shl cl, 3 or al, cl mov byte ptr [rbp - 1], al .loc 51 13 5 is_stmt 1 mov al, byte ptr [rbp - 1] mov byte ptr [rbp - 155], al .loc 51 13 28 is_stmt 0 call example.bitmapGet mov rdi, qword ptr [rbp - 112] mov rsi, qword ptr [rbp - 120] mov rdx, qword ptr [rbp - 88] mov cl, al mov al, byte ptr [rbp - 155] .loc 51 13 39 shl cl, 2 or al, cl mov byte ptr [rbp - 1], al .loc 51 14 5 is_stmt 1 mov al, byte ptr [rbp - 1] mov byte ptr [rbp - 154], al .loc 51 14 28 is_stmt 0 call example.bitmapGet mov rdi, qword ptr [rbp - 96] mov rsi, qword ptr [rbp - 104] mov rdx, qword ptr [rbp - 88] mov r8b, al mov al, byte ptr [rbp - 154] mov cl, 1 .loc 51 14 39 shl r8b, cl mov cl, r8b or al, cl mov byte ptr [rbp - 1], al .loc 51 15 5 is_stmt 1 mov al, byte ptr [rbp - 1] mov byte ptr [rbp - 153], al .loc 51 15 28 is_stmt 0 call example.bitmapGet mov cl, al mov al, byte ptr [rbp - 153] or al, cl mov byte ptr [rbp - 1], al .loc 51 16 30 is_stmt 1 movzx edi, byte ptr [rbp - 1] call math.rotl__anon_7266 mov byte ptr [rbp - 1], al .loc 51 17 5 mov al, byte ptr [rbp - 1] .loc 51 17 5 epilogue_begin is_stmt 0 add rsp, 160 pop rbp .cfi_def_cfa rsp, 8 ret\nThe new version has 116 lines (including non instruction elements like labels), while the old version has 139. In addition, the old version makes calls to Zig's std.math.rotl and has more calls to bitmapGet. Compiler Explorer gives the ability to see the assembly corresponding to certain lines of code. I took a look at the assembly for the old version at the line corresponding to the left shift:mov al, byte ptr [rbp - 1]\nmov cl, 3\nshl al, cl\nmov byte ptr [rbp - 1], al\nPretty simple. When I did the same for the new version, I found this block.mov ax, cx\nand eax, 63\nshl eax, 3\nmov word ptr [rbp - 2], ax\nThis looks similar to the above. The problem is that this block is gated by a check of some sort, seen here. The check either leads to a panic handler, or to another jump that eventually leads to the assembly above. It's possible that such jumps could kill performance.I wanted to test out my 16bit idea, so I loaded the following code into Compiler Explorer:const std = @import(\"std\"); pub fn bitmapGet(bm: []const u8, idx: usize) u8 { return (bm[idx / 8] &gt;&gt; @truncate(idx &amp; 0x7)) &amp; 0x1;\n} pub fn shiftInRight(lookup: u16, row: []const u8, top: []const u8, bottom: []const u8, col: usize) u16 { var newLookup = lookup; newLookup &lt;&lt;= 3; newLookup &amp;= 0x1FF; newLookup |= (bitmapGet(top, col) &lt;&lt; 2); newLookup |= (bitmapGet(row, col) &lt;&lt; 1); newLookup |= (bitmapGet(bottom, col)); return newLookup;\n} pub fn main() anyerror!void { var field: [8]u8 = undefined; var rng = std.rand.DefaultPrng.init(std.crypto.random.int(u64)); rng.fill(&amp;field); var lookup = rng.random().int(u16); lookup = shiftInRight(lookup, field[1..2], field[0..1], field[2..3], 4);\n}\nThe added AND statement should make sure that the value would never exceed 9 set bits. Here is the assembly:example.shiftInRight:\n.Lfunc_begin34: .loc 51 7 0 .cfi_startproc push rbp .cfi_def_cfa_offset 16 .cfi_offset rbp, -16 mov rbp, rsp .cfi_def_cfa_register rbp sub rsp, 128 mov qword ptr [rbp - 128], r8 mov qword ptr [rbp - 120], rcx mov r10, rdx mov qword ptr [rbp - 104], r10 mov r8, rsi mov rsi, qword ptr [rbp - 128] mov qword ptr [rbp - 112], r8 mov eax, edi mov rdi, qword ptr [rbp - 120] mov rdx, qword ptr [rbp + 24] mov qword ptr [rbp - 72], rdx mov rcx, qword ptr [rbp + 16] mov r11, rcx mov qword ptr [rbp - 80], r11 mov r11, r9 mov qword ptr [rbp - 88], r11\n.Ltmp563: .loc 51 7 104 prologue_end mov word ptr [rbp - 58], ax mov qword ptr [rbp - 48], r10 mov qword ptr [rbp - 56], r8 mov qword ptr [rbp - 32], rsi mov qword ptr [rbp - 40], rdi mov qword ptr [rbp - 16], rcx mov qword ptr [rbp - 24], r9 .loc 51 8 5 mov word ptr [rbp - 2], ax .loc 51 9 5 mov ax, word ptr [rbp - 2] shl ax, 3 mov word ptr [rbp - 2], ax .loc 51 10 5 mov al, byte ptr [rbp - 1] and al, 1 mov byte ptr [rbp - 1], al .loc 51 11 5 mov ax, word ptr [rbp - 2] mov word ptr [rbp - 90], ax .loc 51 11 28 is_stmt 0 call example.bitmapGet mov rdi, qword ptr [rbp - 112] mov rsi, qword ptr [rbp - 104] mov rdx, qword ptr [rbp - 72] mov cl, al mov ax, word ptr [rbp - 90] .loc 51 11 39 shl cl, 2 movzx ecx, cl or ax, cx mov word ptr [rbp - 2], ax .loc 51 12 5 is_stmt 1 mov ax, word ptr [rbp - 2] mov word ptr [rbp - 62], ax .loc 51 12 28 is_stmt 0 call example.bitmapGet mov rdi, qword ptr [rbp - 88] mov rsi, qword ptr [rbp - 80] mov rdx, qword ptr [rbp - 72] mov r8b, al mov ax, word ptr [rbp - 62] mov cl, 1 .loc 51 12 39 shl r8b, cl mov cl, r8b movzx ecx, cl or ax, cx mov word ptr [rbp - 2], ax .loc 51 13 5 is_stmt 1 mov ax, word ptr [rbp - 2] mov word ptr [rbp - 60], ax .loc 51 13 28 is_stmt 0 call example.bitmapGet mov cl, al mov ax, word ptr [rbp - 60] movzx ecx, cl or ax, cx mov word ptr [rbp - 2], ax .loc 51 14 5 is_stmt 1 mov ax, word ptr [rbp - 2] .loc 51 14 5 epilogue_begin is_stmt 0 add rsp, 128 pop rbp .cfi_def_cfa rsp, 8 ret\nThis is only 94 lines, with only three calls to bitmapGet! In addition, the assembly corresponding to the left shift is only three instruction as opposed to four from before:mov ax, word ptr [rbp - 2]\nshl ax, 3\nmov word ptr [rbp - 2], ax\nThere is also no branching beyond calling bitmapGet.This looked promising, so I went back and implemented these changes into the benchmark from earlier. The results?10000 steps took 1578029355ns, avg 157802.936ns\nLet's run it more to be sure:Jackpot.The change from u9to u16 saved 36% off of the best execution time of the u9 code. The change to one table, along with the change to u16, saved 13% compared to the two table u8 code. This experiment makes it clear that branching can really destroy your code's speed. I think I learned about the concept of branchless programming on youtube, and its been in the back of my mind. When I was writing the code for the simulator, I avoided having if statements in loops, moving code out of the loop in order to do so sometimes. In fact, there is only one if statement in the entire benchmark program, although it is in a loop.I'm going to merge the simulator in its current state back into main and start working on some of the other tasks. I should also write explaining more about the choice to use Zig as the programming language in this project.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"","fullURL":"daily/12-3-24.html","pathToRoot":"..","attachments":[],"createdTime":1733290044952,"modifiedTime":1733290044952,"sourceSize":21176,"sourcePath":"daily/12-3-24.md","exportPath":"daily/12-3-24.html","showInTree":true,"treeOrder":8,"backlinks":[],"type":"markdown"},"daily/12-7-24.html":{"title":"12-7-24","icon":"","description":"I have added two more items on the outline to the project. The first of these is the ability to step the program as well as have it run at a variety of various time scales. Stepping can be toggled on and off by pressing the P (pause) button, and pressing E to move forward one step. When unpaused, you can adjust the simulator to move between options ranging from one step per frame to one step every five minutes with the Q (shorter delay) and W (longer delay) keys.The second is saving the state of the board to a file upon program exit. I did this using Zig's standard library and its I/O function. I was originally considering memory mapping the file to make it more comparable to how the state will be stored on a microcontroller, but chose not to ultimately. This was because I saw a post somewhere mentioning how memory mapping small files is bad for performance, even though this performance hit wouldn't have mattered much in this application. I also made use of Zig's error handling to account for the case when no state exists. By catching the error the openFile function throws, I can check if the error was due to the file not being found and create the file while throwing an error if either the openFile call failed for another reason or creating a new file fails.I have also decided against compressing the state, so I have checked it off of the list. I was originally planning to use some form of <a data-tooltip-position=\"top\" aria-label=\"https://en.wikipedia.org/wiki/Run-length_encoding\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://en.wikipedia.org/wiki/Run-length_encoding\" target=\"_self\">run-length encoding</a> to save on space. This likely would have worked well after a few steps of the game when the board is mostly dead cells. However, using only RLE would likely have greatly increased the space needed to store the state at the early steps when the board is random with few continuous sequences. I was planning on having extra data to indicate the length of the saved data and whether or not it was run-length encoded. However, this would then require an algorithm to determine when RLE should be employed, which adds extra complexity. This would also require that the persistent storage of the microcontroller be large enough to store the entire uncompressed state anyways.Now that this is done, I will be working on separating all of the platform independent code away from the platform-dependent functionality. This should not be too hard as all of the usage of the standard library and raylib is inside of the main function. All that will be needed is to abstract the details of the display update and state read in such a way that code can work with the simulator the same as the final product.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"","fullURL":"daily/12-7-24.html","pathToRoot":"..","attachments":[],"createdTime":1738861539685,"modifiedTime":1738861539685,"sourceSize":2591,"sourcePath":"daily/12-7-24.md","exportPath":"daily/12-7-24.html","showInTree":true,"treeOrder":9,"backlinks":["project-outline.html"],"type":"markdown"},"daily/12-14-24.html":{"title":"12-14-24","icon":"","description":"I've started a new branch hal that separates platform-independent code, located in common.zig, from platform dependent code. For each target, embedded and desktop, two files need to be created: a hal-{target}.zig and a main-{target}.zig. The hal-{target}.zig files contain the functions\ninitDisplay()\ncloseDisplay()\nsendRow()\nloadBoard()\nsaveBoard()\nThese functions handle the two big non-CPU components of each platform: display and storage. They are designed for ease of use on the embedded board, specifically for writing to an eInk display and saving code to permanent memory (FRAM).\nThe problem with this, and something that has discouraged me, is how this ends up making the desktop side of the code a bit weird. For example, the call to hal.closeDisplay() for desktop actually sends a private (only accessible from the file) framebuffer to the GPU and renders it. This means that main-desktop.zig ends up calling this function every step without opening the display beforehand, as hal.initDisplay() only needs to be called once which conceptually doesn't make much sense.On the actual card, the MCU will be waking up from sleep and readying the eInk display to store data. The eInk will also persistently keep the last image displayed on it, so there is no need to resend the data like I do with the desktop simulator.Looking back after a few days, I am less concerned by the weirdness of the desktop code. Since I am adapting something intended to be run in a much different manner to desktop, some sharp edges are alright. There is one more task I would like to get done before I merge this branch back into main and probably order some parts to start to make this work on real hardware: set up a build system for the MSP430.Testing my code so far has been fairly simple. The vast majority of the time I just do zig build run with maybe a build mode flag if I want to turn off safety checks. I did use a debugger to solve the <a data-tooltip-position=\"top\" aria-label=\"11-30-24\" data-href=\"11-30-24\" href=\"daily/11-30-24.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">corruption issue</a> I ran into earlier, which was a bit tricky but not too bad. I'm expecting getting this code to build for MSP430 to be anything but simple.<br>For starters, LLVM, and by extension Zig, <a data-tooltip-position=\"top\" aria-label=\"https://discourse.llvm.org/t/msp430-code-generation-from-llvm-ir/45501/2\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://discourse.llvm.org/t/msp430-code-generation-from-llvm-ir/45501/2\" target=\"_self\">cannot directly output MSP430 machine code</a>. Instead, it outputs an assembly file that can be assembled by <a data-tooltip-position=\"top\" aria-label=\"https://www.gnu.org/software/binutils/\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.gnu.org/software/binutils/\" target=\"_self\">binutils</a> for MSP430. From what I've seen, either a standard binutils (as seen <a data-tooltip-position=\"top\" aria-label=\"https://aur.archlinux.org/packages/msp430-elf-binutils\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://aur.archlinux.org/packages/msp430-elf-binutils\" target=\"_self\">here</a>) or <a data-tooltip-position=\"top\" aria-label=\"https://www.ti.com/tool/MSP430-GCC-OPENSOURCE\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.ti.com/tool/MSP430-GCC-OPENSOURCE\" target=\"_self\">a special build by TI</a> can be used. There is also the option of using Zig's C backend to turn the Zig code into C and using msp430-gcc to turn the C into machine code.Second, there is the issue of getting Zig to build in whatever system is chosen. I have been using the default build.zig, which is set up to build for the desktop. I'm going to keep this, but I need to set up a process to build the zig code to an assembly file. Ideally this could also be configured to use the toolchain to turn the file into a binary that can be uploaded to the device, but this may be a bit trickier. MSP430 support in Zig is very experimental, so getting it to work may be a challenge. I have had to dig through old github repos and LLVM's internals to find stuff, so it may take a while.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["daily/11-30-24.html"],"author":"","coverImageURL":"","fullURL":"daily/12-14-24.html","pathToRoot":"..","attachments":[],"createdTime":1738861535729,"modifiedTime":1738861535729,"sourceSize":3386,"sourcePath":"daily/12-14-24.md","exportPath":"daily/12-14-24.html","showInTree":true,"treeOrder":10,"backlinks":["daily/12-22-24.html"],"type":"markdown"},"daily/12-22-24.html":{"title":"12-22-24","icon":"","description":"Over the past few days I've played around with the Zig build system as well as GCC/binutils, I've gotten to a point now where I'm able to generate the assembly for the step function, assemble it, and link it (with a generic linker script).Before I started diving deeper into assembly and linking, I first wanted to work on getting Zig's build system to build the assembly file automatically. I was able to do this manually from the command line thanks to <a data-tooltip-position=\"top\" aria-label=\"https://github.com/justinbalexander/msp430-zig\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://github.com/justinbalexander/msp430-zig\" target=\"_self\">some prior work</a> from GitHub user <a data-tooltip-position=\"top\" aria-label=\"https://github.com/justinbalexander\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://github.com/justinbalexander\" target=\"_self\">justinbalexander</a>. The repo, msp430-zig, provides a Makefile that turns Zig source into an MSP430 assembly file that can then be assembled by GNU binutils for MSP430. <a data-tooltip-position=\"top\" aria-label=\"https://github.com/justinbalexander/msp430-zig/blob/003280c5cf6ae6f8a22a13c383dc4e0947056436/Makefile#L11\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://github.com/justinbalexander/msp430-zig/blob/003280c5cf6ae6f8a22a13c383dc4e0947056436/Makefile#L11\" target=\"_self\">This line</a> in the makefile was just what I needed, and after updating it to the current version of Zig (the last commit on the Makefile is over six years old), I ended up with something like this:zig build-obj -O ReleaseSmall -target msp430-freestanding -femit-asm=msp430-test.s msp430-test.zig\n<br>The -O ReleaseSmall is important, using -O ReleaseFast produces very large files that seem to be filled with debug information. When writing basic code to see the compiler in action, I used @ptrFromInt to manually point to some address in memory, being sure to manually specify the type with the volatile keyword. Without this keyword, <a data-tooltip-position=\"top\" aria-label=\"https://ziglang.org/documentation/master/#volatile\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://ziglang.org/documentation/master/#volatile\" target=\"_self\">Zig assumes that nothing actually happens in the program</a> and optimizes everything away. Adding this keyword forces Zig to not assume this, which makes testing a lot more convenient.<br>The next step in this process was to turn this command into something that could be ran in the way that you can run zig build run to build and run the desktop simulator. I took a look at <a data-tooltip-position=\"top\" aria-label=\"https://zig.news/xq/zig-build-explained-part-1-59lf\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://zig.news/xq/zig-build-explained-part-1-59lf\" target=\"_self\">tutorials</a>, existing code, and even the build system's internals. The code that I added consists of three parts:\nBuild the object (assembly file)\nCopy the object to the install directory\nA named step to trigger the previous two steps in order\nEach of these parts is known as a step in the build.zig file. Steps can be told to depend on one another to ensure correct execution order. So step three of this process depends on step two, which in turn depends on step one. That way when step three is run from the command line, steps one and two will run in that order.\nStep one in this process is very similar to how the desktop executable's code is built. In fact, I used the provided code for doing that in build.zig as a guide and modified it to make it work in this context. Both the addExecutable step used for the desktop build and the addObject step used for the assembly build take four options:\nA name\nA root source file\nThe target for the build\nOptimization settings<br>\nThe first two are fairly easy. I chose gol_card for the name and pointed the step at src/main-embedded.zig. The optimization is only slightly harder, being permanently coded to std.builtin.OptimizeMode.ReleaseSmall. The hardest part is the build target. Normally you are able to use b.standardTargetOptions to allow the user to pick what target they build for. However in this case, we want to lock the build down to only one target. This requires two steps. First, a query for the target platform must be built. This can be done by specifying two strings. The first string, known sometimes as a triple, contains the target architecture, OS, and ABI. Since we are not using an OS or ABI in this project, the string msp430-freestanding is used, turning it into a doubble instead of a triple. The next string specifies any special CPU features that LLVM can take advantage of. The msp430-zig repo mentions this when discussing support for hardware multipliers. I took a look at LLVM's source and came across <a data-tooltip-position=\"top\" aria-label=\"https://github.com/llvm/llvm-project/blob/99dddef340e566e9d303010f1219f7d7d6d37a11/llvm/lib/Target/MSP430/MSP430.td#L4\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://github.com/llvm/llvm-project/blob/99dddef340e566e9d303010f1219f7d7d6d37a11/llvm/lib/Target/MSP430/MSP430.td#L4\" target=\"_self\">this file</a> that lists every feature supported by LLVM. At the moment, there are only the features for hardware multipliers (hwmult32 in our case) and one that enables the use of the extended memory extension. This extension may come into play while testing this on real hardware, which I will get into later. For now, I use the string msp430+hwmult32. It turns out that the code as of now does not actually use the multiplier, but I tried out some test code that did and managed to link it with the correct library as mention in the msp430-zig repo.\nOne the assembly file has been built, we need to copy it to the output directory. It seems that Zig keeps output files from builds in the .zig-cache directory and will only copy over the files that you specify to the build output directory. This can be done by creating a step to copy the file using b.addInstallFile and giving it a LazyPath to the eventual location of the assembly file as well as the name of the copy, which I just chose to be gol_card.s.The last step is to give the previous two steps a name so that they can be run from the command line. This can be done with b.step.<br>After all of this, I created a test main-embedded.zig and ran the build script to test everything out. However, I ran into issues with the resulting path of the assembly file not being populated in memory by the time the file copy step ran. What was even stranger was that the code would successfully generate the assembly in the root of the project directory when the command was run, but if the assembly file was deleted and the build was ran from cache it would not. In this case, the assembly file does not appear to even exist in the cache directory. This lead me to dig into the internals of the build system, specifically the process for handling assembly files. I eventually realized that the version of Zig that I was using, 0.13.0, was likely improperly handling the assembly files. Fortunately, <a data-tooltip-position=\"top\" aria-label=\"https://github.com/ziglang/zig/commit/43f73af3595c3174b8e67e9f2792c3774f2192e9\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://github.com/ziglang/zig/commit/43f73af3595c3174b8e67e9f2792c3774f2192e9\" target=\"_self\">a commit to fix this behavior</a> already exists. The problem is that this commit is not included in any new tagged release of Zig (0.13.0 is the newest tagged version at this time). This required me to upgrade my Zig to a nightly build. I downloaded the newest nightly build from <a data-tooltip-position=\"top\" aria-label=\"https://ziglang.org/download/\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://ziglang.org/download/\" target=\"_self\">Zig's website</a>, which ended up being <a data-tooltip-position=\"top\" aria-label=\"https://github.com/ziglang/zig/commit/f857bf72e2239718bbbe4cba08d6961ad77fc69a\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://github.com/ziglang/zig/commit/f857bf72e2239718bbbe4cba08d6961ad77fc69a\" target=\"_self\">this commit</a>. After downloading the archive, all I needed to do was extract the folder inside. The folder is a complete installation of Zig and its standard library, and all I needed to do to start using it was to specify the new Zig binary when running commands instead of the one in my PATH.Before I started working on my assembly problem again, I wanted to make sure my desktop simulator build still worked. There was at least one error that was causing my code not to compile, but they were all very easy to fix. What was not so easy was raylib refusing to build. One of the commits included in my nightly build but not in version 0.13.0 had deprecated a build feature that raylib was using. The fix was a very simple find and replace, but that meant I needed to switch how I was getting my dependencies. I ended up pulling raylib-zig and raylib into my project as git submodules, and then manually changed my build.zig.zon and raylib-zig's to point to the local copies of their dependencies. In the actual raylib project, I made the changes necessary to build it with the nightly build of Zig. While raylib is a pure C project, Zig can actually be used as a build system for C. Raylib supports building using Zig; I only made changes to the build.zig that was already there. Once these changes were made, everything was working fine\\<br>Now that we can produce assembly code, it's time to turn that code into a file that we can flash onto the microcontroller. As I mentioned <a data-tooltip-position=\"top\" aria-label=\"12-14-24\" data-href=\"12-14-24\" href=\"daily/12-14-24.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">previously</a>, the two ways that I was considering for doing this were by using a TI fork of GCC and binutils or just building binutils for the MSP430 from upstream. I tried both of these out, and for now I'm going to go with the TI version of GCC and binutils. While it is older, I didn't notice any difference in size in the output of either program. By using TI's prebuilt package, I can set up a script to download and extract everything I need and be ready to go. I was also unable to link the program when adding the code to step the simulation when using the upstream binutils. This is because the step code depends on calls to memcpy, which upstream binutils does not have an implementation for. TI's toolchain comes with such an implementation and links it automatically.I also noticed that LLVM emits certain directives in the assembly that the assembler does not support and causes it to fail. These directives can be removed with a regex, but I also wonder if there is a way to make the assembler ignore them.There's still more work to do in this area. I will create a script that will check if the toolchain is installed and download it if it isn't. This reduces the chances that manual setup will be needed to build code for the microcontroller on another Linux machine. I also need to tie this script, as well as the actual assembly and linking, into the Zig build system.I have also ordered the parts I need to create a hardware prototype of the card. I ordered the eInk display I plan in breakout board form. It's technically a Raspberry Pi HAT, but it has a connector that allows it to be used with any microcontroller fairly easily. I have also ordered two of TI's Launchpads to prototype with. One contains the MSP430FR2433 that I plan on using in the project. However, I also ordered one containing an MSP430FR2476. These two chips are very similar, except that the 2476 has 64kB of FRAM and 8kB RAM. I mentioned before that special instructions are needed to access certain portions of memory. This chip has enough FRAM that these instructions might come into play. After reading TI's user guide for the chip, I think it is possible to get away without ever using the extension since my entire program and data will fit within the range where the extension instructions are not needed.I actually do not plan on using this specific chip in my design. I ordered a board with it as very close to the MSP430FR2475, which has 32kB of FRAM and 6kB ram. Fitting the state of the game, the program code, and the various tables and other data needed for the program to run in a bit less than 16kB is going to be a tight fit. If I find myself unable to, I want to avoid waiting for another Launchpad to come in to continue testing. I really hope to fit everything in 16kB, but I am preparing in case I cannot.I have also taken a look at the library given by the eInk vendor. It's written in C, but I plan on porting it over to Zig. None of the code looked particularly complicated from what I saw. There are a few arrays of data in the code that will need to be stored, but they should not take up much space.I also still need to write about my choice to use Zig as well as the reasoning behind the hardware decisions I am making.It's been about a month since I started writing the code for the simulator. The concept of a advanced PCB business card has been floating around in my mind since late spring/early summer. Now that I've finally pulled the trigger on these parts, I feel that I'm getting closer to actually finishing this project. There's still a lot to do, namely the custom hardware design, but I'm excited to see how this project plays out.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"build.zig","level":1,"id":"build.zig_0"},{"heading":"Building the Object","level":2,"id":"Building_the_Object_0"},{"heading":"Copying The Object","level":2,"id":"Copying_The_Object_0"},{"heading":"Named Step","level":2,"id":"Named_Step_0"},{"heading":"Upgrading Zig","level":1,"id":"Upgrading_Zig_0"},{"heading":"Assembly and Linking","level":1,"id":"Assembly_and_Linking_0"},{"heading":"What's Next","level":1,"id":"What's_Next_0"}],"links":["daily/12-14-24.html"],"author":"","coverImageURL":"","fullURL":"daily/12-22-24.html","pathToRoot":"..","attachments":[],"createdTime":1738861529323,"modifiedTime":1738861529323,"sourceSize":11881,"sourcePath":"daily/12-22-24.md","exportPath":"daily/12-22-24.html","showInTree":true,"treeOrder":11,"backlinks":["project-outline.html"],"type":"markdown"},"daily/12-30-24.html":{"title":"12-30-24","icon":"","description":"I have written the <a data-tooltip-position=\"top\" aria-label=\"Zig\" data-href=\"Zig\" href=\"zig.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">why zig</a> document that I have been wanting to write for a while. I will likely come back to it, as I want the writeups in the root of this project to have a lot more polish on them. They will contain the highlights of the project. The files in this folder are more of a self-journal that provide a more detailed insight into my thought process.I've started working on the build script, and I'm realizing that it's a lot more of a challenge than I initially expected. I haven't even tried out my new Lauchpad boards. However, getting this build script to work in the way I've chosen to go with it is going to show off a lot of what the Zig build system can do.<br>My first stab at the build script was just that: a shell script. I started working on it, got to the point where I was downloading TI's GCC for linux, and realized that this is not the way things are supposed to be done in Zig. <a data-tooltip-position=\"top\" aria-label=\"https://www.youtube.com/watch?v=Gv2I7qTux7g&amp;t=2099s\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.youtube.com/watch?v=Gv2I7qTux7g&amp;t=2099s\" target=\"_self\">This segment</a> in one of the videos I mentioned in the <a data-href=\"Zig\" href=\"zig.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">Zig</a> writeup gets this point across well. In the ideal Zig build system, the only dependency required is the Zig compiler itself. Everything else is built from source by Zig. This approach has also been reflected in the design of the package manager. <a data-tooltip-position=\"top\" aria-label=\"https://ziggit.dev/t/best-practice-for-pre-installing-an-external-tool-used-during-normal-build-run-flow/5165/2\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://ziggit.dev/t/best-practice-for-pre-installing-an-external-tool-used-during-normal-build-run-flow/5165/2\" target=\"_self\">It's not designed to handle binaries</a>, rather source code. I decided that I ought to do things the Zig way in this project.That statement does have limits though. If I were to follow through with that completely, I would need to build TI's GCC. With all of the autoconf it uses, that would a project of its own. Going back to plain binutils has the same issue. Here is the set of rules I decided on, in order:\n<br>If someone else has already ported the build system of a project I need to Zig, use it. There is a whole <a data-tooltip-position=\"top\" aria-label=\"https://github.com/allyourcodebase\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://github.com/allyourcodebase\" target=\"_self\">group</a> dedicated to this.\nIf the build system is simple enough (a Makefile), configure the build myself.\nIf cross-platform (no apt, dnf, etc.) binaries are available, download them within the build script.\nIf none of the above apply, rely on having the user install the dependency.\nLet's take a look at the dependencies this project needs. These can be split into two groups: build dependencies and deploy dependencies. The build dependencies are just TI's GCC toolchain, which is able to assemble and link the assembly that LLVM/Zig puts out. It would be very complicated to get this to build from source using Zig, and TI provides binaries for Linux, Windows, and Mac. My current plan is to download the needed files inside the build script and extract them. There are two components: a platform dependent set of prebuilt binaries, and a platform independent set of header files and linker scripts for different microcontrollers. The first will be extracted in its entirety, while I will only extract the linker scripts I need from the second. I have written code to check the integrity of the downloaded files using the MD5 hashes on TI's website. Ideally I would have Zig code to download and extract too, but I may fall back to relying on utilities that most systems would have installed (wget, tar, unzip).<br>The deploy dependencies center around <a data-tooltip-position=\"top\" aria-label=\"https://github.com/dlbeer/mspdebug\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://github.com/dlbeer/mspdebug\" target=\"_self\">MSPDebug</a>, an open source program for interacting with a wide variety of MSP430 ecosystem devices. In the build script, it will be used to provide a zig build deploy command that will upload the program to a connected board. I also plan to expose a option to run MSPDebug standalone inorder to use its debugging features. MSPDebug does not have binaries available, but its build system is luckily fairly simple. However, it has a few dependencies that pose a challenge. The most prominent one is libusb. My initial research into this lead to me finding a <a data-tooltip-position=\"top\" aria-label=\"https://github.com/allyourcodebase/libusb\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://github.com/allyourcodebase/libusb\" target=\"_self\">ready-made Zig build</a> of it. However, this build is for the newer 1.0 version of libusb. MSPDebug is still stuck on the outdated 0.1 version of libusb. I couldn't even install version 0.1 of libusb directly; I needed to install a compatibility layer that translated between the two.Right now I am using libusb and the compatibility layer installed on my system. It might be possible to build the compatibility layer as its only a few files, but the repo does use autoconf. I won't come back to that untill I get the rest of the build system working though.The project also has an optional dependency on GNU Readline, which I chose not to use to make the program easier to build. I may add it in as a flag if it would make debugging easier.I also had a dependency on libudev in my project when I got it to build, but I just removed it while writing this and it build just fine. This might be due to caching, but I do not see libudev used in this project. If it wasn't required to make it build I don't know why I would add it, but removing it works now.<br>The last potential dependency on this side is a driver from TI called libmsp430. This is a shared library from TI that handles communication with MSP430 devices, including the programmer on the Launchpad board. I say potential because MSPDebug ships with a standalone driver for taking to the eZ-FET, but <a data-tooltip-position=\"top\" aria-label=\"https://github.com/dlbeer/mspdebug/issues/43\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://github.com/dlbeer/mspdebug/issues/43\" target=\"_self\">it seems that it has problems at times</a>. This drives does ship in a precompiled binary as well as source code. After I get the rest of the build script to work, I will try using the standalone driver. If it works, I will use that. If it doesn't, I will try getting libmsp430 to build from source before resorting to the binaries.I have gotten to the point where I have gotten MSPDebug to build on my system using the system libusb. I can get it to launch and run it like normal from the zig-out directory. I have also tried to set it up using a build step like zig build run. The app runs, but I am unable to pass it extra command line arguments unless I edit build.zig. I'm going to switch gears to work on the build side of things, but I plan to return to MSPDebug soon.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":["zig.html","zig.html"],"author":"","coverImageURL":"","fullURL":"daily/12-30-24.html","pathToRoot":"..","attachments":[],"createdTime":1736390786507,"modifiedTime":1736390786507,"sourceSize":6150,"sourcePath":"daily/12-30-24.md","exportPath":"daily/12-30-24.html","showInTree":true,"treeOrder":12,"backlinks":["project-outline.html","daily/1-7-25.html"],"type":"markdown"},"img/first_img.html":{"title":"first_img","icon":"","description":"<img src=\"img/first_img.jpg\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"img/first_img.jpg","fullURL":"img/first_img.html","pathToRoot":"..","attachments":["img/first_img.html"],"createdTime":1739132899650,"modifiedTime":1739132899655,"sourceSize":2575058,"sourcePath":"img/first_img.jpg","exportPath":"img/first_img.html","showInTree":true,"treeOrder":14,"backlinks":["daily/2-4-25.html"],"type":"attachment"},"img/img_7776.html":{"title":"IMG_7776","icon":"","description":"<img src=\"img/img_7776.jpeg\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"img/img_7776.jpeg","fullURL":"img/img_7776.html","pathToRoot":"..","attachments":["img/img_7776.html"],"createdTime":1757995500055,"modifiedTime":1757995500059,"sourceSize":2125562,"sourcePath":"img/IMG_7776.jpeg","exportPath":"img/img_7776.html","showInTree":true,"treeOrder":15,"backlinks":["pcb-assembly.html"],"type":"attachment"},"img/img_7778.html":{"title":"IMG_7778","icon":"","description":"<img src=\"img/img_7778.jpeg\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"img/img_7778.jpeg","fullURL":"img/img_7778.html","pathToRoot":"..","attachments":["img/img_7778.html"],"createdTime":1757995500059,"modifiedTime":1757995500065,"sourceSize":2148214,"sourcePath":"img/IMG_7778.jpeg","exportPath":"img/img_7778.html","showInTree":true,"treeOrder":16,"backlinks":["pcb-assembly.html"],"type":"attachment"},"img/img_7779.html":{"title":"IMG_7779","icon":"","description":"<img src=\"img/img_7779.jpeg\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"img/img_7779.jpeg","fullURL":"img/img_7779.html","pathToRoot":"..","attachments":["img/img_7779.html"],"createdTime":1757995500065,"modifiedTime":1757995500069,"sourceSize":3231669,"sourcePath":"img/IMG_7779.jpeg","exportPath":"img/img_7779.html","showInTree":true,"treeOrder":17,"backlinks":["pcb-assembly.html"],"type":"attachment"},"img/img_7780.html":{"title":"IMG_7780","icon":"","description":"<img src=\"img/img_7780.jpeg\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"img/img_7780.jpeg","fullURL":"img/img_7780.html","pathToRoot":"..","attachments":["img/img_7780.html"],"createdTime":1757995500069,"modifiedTime":1757995500076,"sourceSize":2291958,"sourcePath":"img/IMG_7780.jpeg","exportPath":"img/img_7780.html","showInTree":true,"treeOrder":18,"backlinks":["pcb-assembly.html"],"type":"attachment"},"img/img_7781.html":{"title":"IMG_7781","icon":"","description":"<img src=\"img/img_7781.jpeg\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"img/img_7781.jpeg","fullURL":"img/img_7781.html","pathToRoot":"..","attachments":["img/img_7781.html"],"createdTime":1757995500076,"modifiedTime":1757995500083,"sourceSize":3448338,"sourcePath":"img/IMG_7781.jpeg","exportPath":"img/img_7781.html","showInTree":true,"treeOrder":19,"backlinks":["pcb-assembly.html"],"type":"attachment"},"img/img_7782.html":{"title":"IMG_7782","icon":"","description":"","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"","fullURL":"img/img_7782.html","pathToRoot":"..","attachments":["img/img_7782.html"],"createdTime":1757995500083,"modifiedTime":1757995500156,"sourceSize":57662975,"sourcePath":"img/IMG_7782.mov","exportPath":"img/img_7782.html","showInTree":true,"treeOrder":20,"backlinks":["pcb-assembly.html"],"type":"attachment"},"img/img_7807.html":{"title":"IMG_7807","icon":"","description":"<img src=\"img/img_7807.jpeg\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"img/img_7807.jpeg","fullURL":"img/img_7807.html","pathToRoot":"..","attachments":["img/img_7807.html"],"createdTime":1757995500158,"modifiedTime":1757995500164,"sourceSize":2872751,"sourcePath":"img/IMG_7807.jpeg","exportPath":"img/img_7807.html","showInTree":true,"treeOrder":21,"backlinks":["pcb-assembly.html"],"type":"attachment"},"img/pasted-image-20241130232126.html":{"title":"Pasted image 20241130232126","icon":"","description":"<img src=\"img/pasted-image-20241130232126.png\" target=\"_self\">","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":".","fullURL":"img/pasted-image-20241130232126.html","pathToRoot":"..","attachments":["img/pasted-image-20241130232126.html"],"createdTime":1733290044952,"modifiedTime":1733290044952,"sourceSize":25695,"sourcePath":"img/Pasted image 20241130232126.png","exportPath":"img/pasted-image-20241130232126.html","showInTree":true,"treeOrder":22,"backlinks":["daily/11-30-24.html"],"type":"attachment"},"component-selection.html":{"title":"Component Selection","icon":"","description":"Apart from a few passive components, the components on this board were carefully picked to meet the requirements of the project. Here are a few of the biggest ones:This component gave this project its start. I wanted to do an ePaper based business card, and I needed to pick an appropriate display. Ideal displays for me would be space efficient on a standard business card, have a breakout board I could purchase for easy development, and have a standalone module for the final board. This display met these criteria to a T. Almost exactly the size of a European business card and available in both raw module and breakout form, this display is exactly what I was looking for.I was debating between this display and a smaller one, but I settled on having more viewing area.After I had found a display for the project, I needed to choose a microcontroller to drive it.\nSince my primary concern was low power consumption, I made a search for common low power microcontrollers. This led me to discover the <a data-tooltip-position=\"top\" aria-label=\"https://www.ti.com/product-category/microcontrollers-processors/msp430-mcus/overview.html\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.ti.com/product-category/microcontrollers-processors/msp430-mcus/overview.html\" target=\"_self\">MSP430</a> line of microcontrollers from Texas Instruments.<br>Although I had considered using one of the increasingly popular STM32 line of microcontrollers as well as TI's newer ARM based microcontrollers, the classic MSP430 line had one major advantage: built in <a data-tooltip-position=\"top\" aria-label=\"https://en.wikipedia.org/wiki/Ferroelectric_RAM\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://en.wikipedia.org/wiki/Ferroelectric_RAM\" target=\"_self\">FRAM</a> options. I needed a sizeable (~11kB) amount of nonvolatile memory to store the state of the board during the time the microcontroller would be asleep. Since I would be rewriting the entire region every five minutes, I did not want to use flash memory due to its high power consumption and low durability. After learning about FRAM I knew that it would be a perfect fit for this project. I initially planned to use an external FRAM chip to hold the data, but the MSP430FR series seemed like the perfect fit. <br>I eventually settled on two different microcontrollers: the 16kB MSP430FR2433 and the 32kB <a data-tooltip-position=\"top\" aria-label=\"https://www.ti.com/product/MSP430FR2475\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.ti.com/product/MSP430FR2475\" target=\"_self\">MSP430FR2475</a>. I ordered a breakout board with the 2433, but I had to order a breakout board of the 64kB <a data-tooltip-position=\"top\" aria-label=\"https://www.ti.com/product/MSP430FR2476\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.ti.com/product/MSP430FR2476\" target=\"_self\">MSP430FR2476</a> as there was not a breakout board available for the smaller version. After learning my code and data could fit into 16kB, I moved ahead with the MSP430FR2433.If I had to redo this project, I would make sure to select a chip with a DMA module on it. Having to manually set up an interrupt to copy image data to the SPI module wastes CPU clock cycles and development time. TI does have MSP430FR series microcontrollers with a DMA module which would have been a better choice. I would also reevaluate the choice to use the MSP430 architecture at all. Although it is supported in Zig, its support is very experimental, only being able to output broken assembly files. Choosing a more supported architecture like ARM would have saved me a lot of time.Picking the above two components was enough for the first few months of the project, and led me to a working prototype. When it was time to design my own PCB, however, I needed to pick a lot more. The most pressing issue I faced was that the ePaper display drew too much power to run from a coin cell battery. In addition, I realized that a discharged coin cell battery would not meet even the minimum voltage requirement of the display. I did not want to move away from the coin cell, as I wanted to keep the battery user replaceable while being easy to find.Although I wanted to avoid adding a switching converter to the board due to the power loss and the extra complexity involved, there was no other viable option. I considered using a charge pump to double the battery voltage, but the voltages produced would need to be regulated down again, wasting more energy.I selected this chip due to its high efficiency, matching input voltage range, low external part count, and its pass through functionality. This allows me to directly power the microcontroller from the battery while it is asleep, resulting in power savings. The datasheet for the part also directly mentioned the use of 3V lithium batteries as an application, so it seemed like the right chip for the job.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"<a data-tooltip-position=\"top\" aria-label=\"https://www.waveshare.com/product/displays/e-paper/epaper-2/3.52inch-e-paper.htm\" rel=\"noopener nofollow\" class=\"external-link\" href=\"https://www.waveshare.com/product/displays/e-paper/epaper-2/3.52inch-e-paper.htm\" target=\"_blank\">ePaper Display</a>","level":1,"id":"[ePaper_Display](https//www.waveshare.com/product/displays/e-paper/epaper-2/3.52inch-e-paper.htm)_0"},{"heading":"Microcontroller: <a data-tooltip-position=\"top\" aria-label=\"https://www.ti.com/product/MSP430FR2433\" rel=\"noopener nofollow\" class=\"external-link\" href=\"https://www.ti.com/product/MSP430FR2433\" target=\"_blank\">MSP430FR2433</a>","level":1,"id":"Microcontroller_[MSP430FR2433](https//www.ti.com/product/MSP430FR2433)_0"},{"heading":"Boost Converter: <a data-tooltip-position=\"top\" aria-label=\"https://www.ti.com/product/TPS61291\" rel=\"noopener nofollow\" class=\"external-link\" href=\"https://www.ti.com/product/TPS61291\" target=\"_blank\">TPS61291</a>","level":1,"id":"Boost_Converter_[TPS61291](https//www.ti.com/product/TPS61291)_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"component-selection.html","pathToRoot":".","attachments":[],"createdTime":1757995500054,"modifiedTime":1757995500054,"sourceSize":4492,"sourcePath":"Component Selection.md","exportPath":"component-selection.html","showInTree":true,"treeOrder":23,"backlinks":["index.html"],"type":"markdown"},"early-planning-note.html":{"title":"Early Planning Note","icon":"","description":"This was a file I had on my computer with some early ideas for this project:Timer IC\n<a data-tooltip-position=\"top\" aria-label=\"https://www.ti.com/lit/gpn/tpl5110\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.ti.com/lit/gpn/tpl5110\" target=\"_self\">TPL5110</a> if design uses mosfet\n<br><a data-tooltip-position=\"top\" aria-label=\"https://www.ti.com/lit/gpn/tpl5111\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.ti.com/lit/gpn/tpl5111\" target=\"_self\">TPL5111</a> if LDO is used\nMCUeInk Display\n<br><a data-tooltip-position=\"top\" aria-label=\"https://www.waveshare.com/product/displays/e-paper/epaper-2/3.52inch-e-paper.htm\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.waveshare.com/product/displays/e-paper/epaper-2/3.52inch-e-paper.htm\" target=\"_self\">This display</a> is ~4mm over in the y direction, but it is very close otherwise <br>Driver circuitry can be found on page 57 of <a data-tooltip-position=\"top\" aria-label=\"https://files.waveshare.com/upload/7/7a/UC8253c.pdf\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://files.waveshare.com/upload/7/7a/UC8253c.pdf\" target=\"_self\">this datasheet</a>. <br><a data-tooltip-position=\"top\" aria-label=\"https://www.waveshare.com/wiki/2.9inch_e-Paper_Module\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.waveshare.com/wiki/2.9inch_e-Paper_Module\" target=\"_self\">This one</a> is smaller, but the whole design (components only, traces on back are fine) will probably be able to fit on to one side with it Chip datasheet not available separately, but the waveshare datasheet includes a circuit\n<br>Seems to be <a data-tooltip-position=\"top\" aria-label=\"https://github.com/adafruit/Adafruit_EPD/blob/master/src/panels/ThinkInk_290_Grayscale4_T5.h\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://github.com/adafruit/Adafruit_EPD/blob/master/src/panels/ThinkInk_290_Grayscale4_T5.h\" target=\"_self\">IL0373</a>, the Adafruit featherwing probably uses the same module Battery\n<br><a data-tooltip-position=\"top\" aria-label=\"https://www.digikey.com/en/products/detail/seiko-instruments/MS421R-IV03E/11696836\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.digikey.com/en/products/detail/seiko-instruments/MS421R-IV03E/11696836\" target=\"_self\">This</a> is one of the tiniest rechargable SMT batteries (not replacable though), it is just over 2mm thick\ncapacitors won't hold charge for long enough\n<br><a data-tooltip-position=\"top\" aria-label=\"https://www.digikey.com/en/products/detail/seiko-instruments/MS621FE/1887175\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.digikey.com/en/products/detail/seiko-instruments/MS621FE/1887175\" target=\"_self\">replacable coin cell that can fit</a>, <a data-tooltip-position=\"top\" aria-label=\"https://www.digikey.com/en/products/detail/keystone-electronics/3098/2745787\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.digikey.com/en/products/detail/keystone-electronics/3098/2745787\" target=\"_self\">holder</a>\n<br>all of <a data-tooltip-position=\"top\" aria-label=\"https://www.sii.co.jp/en/me/files/2024/01/MicroBattery_E_20230330_rev05-security.pdf\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.sii.co.jp/en/me/files/2024/01/MicroBattery_E_20230330_rev05-security.pdf\" target=\"_self\">these parts</a> seem good, document also has charging circuit for battery\nSolar\n<br><a data-tooltip-position=\"top\" aria-label=\"https://www.digikey.com/en/products/detail/tdk-corporation/BCSC452B3/22608180\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.digikey.com/en/products/detail/tdk-corporation/BCSC452B3/22608180\" target=\"_self\">This part</a> from TDK looks good <br><a data-tooltip-position=\"top\" aria-label=\"https://www.digikey.com/en/videos/t/tdk/eye-on-npi-tdk-bcs-series-low-illumination-film-solar-cells-eyeonnpi-digikey-tdkcorporation\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.digikey.com/en/videos/t/tdk/eye-on-npi-tdk-bcs-series-low-illumination-film-solar-cells-eyeonnpi-digikey-tdkcorporation\" target=\"_self\">Video</a> showing usage and chip <br><a data-tooltip-position=\"top\" aria-label=\"https://www.digikey.com/en/products/detail/panasonic-bsg/AM-1417CA-DGK-E/2165185\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.digikey.com/en/products/detail/panasonic-bsg/AM-1417CA-DGK-E/2165185\" target=\"_self\">This part</a> is smaller, but it has easy to use wires\n<br><a data-tooltip-position=\"top\" aria-label=\"https://www.analog.com/en/products/max20361.html\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.analog.com/en/products/max20361.html\" target=\"_self\">This chip</a> looks useful, but only with higher powered solar module <br><a data-tooltip-position=\"top\" aria-label=\"https://www.digikey.com/en/products/detail/anysolar-ltd/SM141K04TFV/14311388\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.digikey.com/en/products/detail/anysolar-ltd/SM141K04TFV/14311388\" target=\"_self\">Like this one</a> <br><a data-tooltip-position=\"top\" aria-label=\"https://www.analog.com/en/products/adp5091.html?doc=ADP5091-5092.pdf\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.analog.com/en/products/adp5091.html?doc=ADP5091-5092.pdf\" target=\"_self\">Another analog chip</a>\n<br><a data-tooltip-position=\"top\" aria-label=\"https://www.ti.com/product/BQ25505\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.ti.com/product/BQ25505\" target=\"_self\">This one</a> from TI looks good, is low cost, and is active for new designs unlike the analog one <br><a data-tooltip-position=\"top\" aria-label=\"https://www.digikey.com/en/products/detail/texas-instruments/BQ25504RGTR/2799286\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.digikey.com/en/products/detail/texas-instruments/BQ25504RGTR/2799286\" target=\"_self\">This one</a> is simpler because it doesn't have non-rechargeable battery fallback but it costs more (maybe because it is smaller)\n<br>Combine with a <a data-tooltip-position=\"top\" aria-label=\"https://www.ti.com/product/TPS610986\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.ti.com/product/TPS610986\" target=\"_self\">boost converter</a> and TPL5111 ","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[],"links":[],"author":"","coverImageURL":"","fullURL":"early-planning-note.html","pathToRoot":".","attachments":[],"createdTime":1739210880247,"modifiedTime":1739210903021,"sourceSize":2767,"sourcePath":"Early Planning Note.md","exportPath":"early-planning-note.html","showInTree":true,"treeOrder":24,"backlinks":["index.html"],"type":"markdown"},"index.html":{"title":"index","icon":"","description":"This directory contains documentation for this project. It was written using <a data-tooltip-position=\"top\" aria-label=\"https://obsidian.md/\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://obsidian.md/\" target=\"_self\">Obsidian</a>. If you choose to view the markdown in the GitHub viewer, some Obsidian specific formatting will not render correctly. You can view this documentation as a website <a data-tooltip-position=\"top\" aria-label=\"https://itsmajestix.github.io/gol-card/\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://itsmajestix.github.io/gol-card/\" target=\"_self\">here</a>.The following is a brief explanation of what documents can be found in this folder.The daily folder, despite its name, does not contain daily updates. Instead, larger updates are given roughly every week. These go over my thoughts as I was working on the software portion of the project, ending in February 2025.An overview of Zig, the language this project is written in.An outline for the project that I created towards its start. It was loosely followed, especially in stage two. Obsidian links indicate the note where the task was completed.This file is another Obsidian note I had in a different folder working out ideas for a project like this.Details the reasons for selecting certain components on the board.Goes over the process of designing the schematic for the board and then placing and routing it.An overview of the (loose) process I used to produce boards.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"<code>daily</code>","level":1,"id":"`daily`_0"},{"heading":"<a data-href=\"Zig\" href=\"Zig\" class=\"internal-link\" target=\"_blank\" rel=\"noopener nofollow\">Zig</a>","level":1,"id":"[[Zig]]_0"},{"heading":"<a data-href=\"Project Outline\" href=\"Project Outline\" class=\"internal-link\" target=\"_blank\" rel=\"noopener nofollow\">Project Outline</a>","level":1,"id":"[[Project_Outline]]_0"},{"heading":"<a data-href=\"Early Planning Note\" href=\"Early Planning Note\" class=\"internal-link\" target=\"_blank\" rel=\"noopener nofollow\">Early Planning Note</a>","level":1,"id":"[[Early_Planning_Note]]_0"},{"heading":"<a data-href=\"Component Selection\" href=\"Component Selection\" class=\"internal-link\" target=\"_blank\" rel=\"noopener nofollow\">Component Selection</a>","level":1,"id":"[[Component_Selection]]_0"},{"heading":"<a data-href=\"PCB Design\" href=\"PCB Design\" class=\"internal-link\" target=\"_blank\" rel=\"noopener nofollow\">PCB Design</a>","level":1,"id":"[[PCB_Design]]_0"},{"heading":"<a data-href=\"PCB Assembly\" href=\"PCB Assembly\" class=\"internal-link\" target=\"_blank\" rel=\"noopener nofollow\">PCB Assembly</a>","level":1,"id":"[[PCB_Assembly]]_0"}],"links":["zig.html","project-outline.html","early-planning-note.html","component-selection.html","pcb-design.html","pcb-assembly.html"],"author":"","coverImageURL":"","fullURL":"index.html","pathToRoot":".","attachments":[],"createdTime":1757995500164,"modifiedTime":1758040923741,"sourceSize":1339,"sourcePath":"index.md","exportPath":"index.html","showInTree":true,"treeOrder":25,"backlinks":[],"type":"markdown"},"pcb-assembly.html":{"title":"PCB Assembly","icon":"","description":"Once I had all of the parts ordered, it was time to assemble. This was my first time assembling SMD components by hand, so I had to learn how.I decided early on that I wanted to solder the entire board all at once with a reflow oven instead of using a hot air gun on each part. I had seen online that many people build their own reflow devices using a toaster oven or skillet combined with an thermocouple, relay, and Arduino. In my ECE 203 class Spring 2025 semester, I designed and built one of these ovens using a toaster oven I bought from Saint Vincent de Paul's. It used an Arduino clone to control a solid state relay hooked up to the oven's heating elements. Internally, the code used PD+feedforward control to maintain a desired temperature with reference to a thermocouple. Despite the outward appearance of the oven, it produced very good results, leaving cleaner pads then the oven I used later on.Note: the pictures in this section are from the second batch of boards I assembled this September.\nOnce it was time to assemble the boards, I headed over to the UW-Madison Design Innovation lab for a place to work as well as access to a microscope. This microscope was crucial in the assembly process, and it would have been nearly impossible to complete this project without it.The first step was to grind down the panelization spurs that came on my boards from the PCB manufacturer, who places multiple different boards from multiple orders on a single large panel for manufacturing.\n<img alt=\"IMG_7778.jpeg\" src=\"img/img_7778.jpeg\" target=\"_self\">\nI did this using a rotary tool with a sanding attachment. Since normal PCBs have a fiberglass based substrate in them, and microscopic fiberglass in the air could be harmful to breath, I used the tool inside a vacuum table in the lab's wood shop.<br>\n<img alt=\"IMG_7779.jpeg\" src=\"img/img_7779.jpeg\" target=\"_self\">\nWhen grinding, I made sure to be liberal with the grinder to ensure the rest of the edge would be the high point on each board.<br>\n<img alt=\"IMG_7780.jpeg\" src=\"img/img_7780.jpeg\" target=\"_self\"><br>\nOnce the boards had been ground down, the next step was applying the solder paste using the stencil. My first set of attempts to do this were not well thought out and resulted in many bridges between small pads. After watching <a data-tooltip-position=\"top\" aria-label=\"https://www.youtube.com/watch?v=AIiAAxyvRB0\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.youtube.com/watch?v=AIiAAxyvRB0\" target=\"_self\">this video</a> about pasting, I used a similar process. I began by printing out four 90mm x 90mm x 1.6mm plates on the lab's 3D printers on a very low layer height preset along with <a data-tooltip-position=\"top\" aria-label=\"https://wiki.bambulab.com/en/software/bambu-studio/parameter/ironing\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://wiki.bambulab.com/en/software/bambu-studio/parameter/ironing\" target=\"_self\">ironing</a> the top layer to make a plate very close to the thickness of a PCB. I taped these plates around one of my PCBs using thin tape to create a jig that would securely hold the PCBs during the pasting process. I then used some blue painter's tape to tape the stencil into place before (ideally) wiping down the board and stencil with isopropyl alcohol. After the surface was dry, I applied paste and used a putty knife to spread it across the stencil and board. I chose to pull the paste in the direction along the pins of the FPC connector, which were prone to bridging in my previous runs.<br>\n<img alt=\"IMG_7776.jpeg\" src=\"img/img_7776.jpeg\" target=\"_self\">\nBefore continuing, I inspected the boards to make sure the paste was in approximately the right position and did not have any bridges.<br>\n<img alt=\"IMG_7781.jpeg\" src=\"img/img_7781.jpeg\" target=\"_self\">\nAfter this, it was time to assemble. There wasn't anything too special to this besides a pair of fine tweezers, a microscope, and a bit of patience. I had my KiCad project on my laptop to make sure I was grabbing the right components from my stack and putting them in the right place.\nThe first board I produced I reflowed in my homemade reflow oven described above. However, that oven was very large and a bit difficult to use. The day that I was making the boards pictured above, someone came to my station to use two mini ovens that were right there on the table. I had seen these before, but I thought they\nwere for PCB rework and not reflow, and\ndidn't have the right settings for my solder paste.\nHowever, I saw the person using the station to reflow a MOSFET onto a PCB, and the machine supported custom profiles. Since the PCBs and components should be able to survive at least two reflow cycles, I decided to give the new oven a try. I programmed the flow profile from my solder paste's datasheet into the machine, and did a dry run to verify it worked. After not seeing any issues with the profile, I placed one of my boards into the machine and fired it up. The resulting board looked a bit more scorched than the one I made in my own oven, but I was able was able to connect to it with my debugging probe, which will be discussed shortly. The remainder of the boards were then assembled using this oven.\nOnce I had assembled boards, it was time to flash my firmware onto them. To do this, I created an adapter from the eZ-FET debugger on one of the Launchpads I had used during the first stage of this project to the Tag Connect cable that would attach to the board.<br>\n<img alt=\"IMG_7807.jpeg\" src=\"img/img_7807.jpeg\" target=\"_self\"><br>\nMy first test consisted of connecting the board to debugger and using <a data-tooltip-position=\"top\" aria-label=\"https://github.com/dlbeer/mspdebug\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://github.com/dlbeer/mspdebug\" target=\"_self\">MSPDebug</a> to see if the debugger could even connect to the board. After this, I would flash the code onto the microcontroller. I later starting doing a test at this stage that involved connecting an ePaper display to the board and making sure it reset to black, as the board is set by default to all zeros.Once I had flashed the firmware, I used MSPDebug to flash the initial board state onto the chip. For my first few boards I reused the test state I had been working with in the simulator, but once I started really working on the boards I used the command line to generate a file full of random bytes (plus zeros for the \"header\") and flashed that. It was important that this was done now as once I soldered the jumper to the boost converter closed using the debugger would fry the boost IC, and desoldering the jumper would take a bit of effort.If I was able to redesign the project with the knowledge I have now, I would replace the jumper with a SMT switch. This would be much easier to use that a solder jumper, provide better isolation between the debugger and the boost converter, and act as a reset switch removing the need for a second reset jumper near the MCU.Once everything was programmed, I went and soldered the jumper to the boost converter shut to connect it to the rest of the board. Once I made sure everything worked with a coin cell, I used hot glue to attach the display to the back of the PCB. This is because it is easy to remove with isopropyl alcohol and it does not release fumes when heated like CA glue does. The downside is that the glue comes off fairly easily, but for something that I want to be easy to remove it is not a huge deal.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Reflow Oven","level":1,"id":"Reflow_Oven_0"},{"heading":"Board Assembly","level":1,"id":"Board_Assembly_0"},{"heading":"Reflow Soldering","level":1,"id":"Reflow_Soldering_0"},{"heading":"Programming and Final Touches","level":1,"id":"Programming_and_Final_Touches_0"}],"links":[],"author":"","coverImageURL":"img/img_7778.jpeg","fullURL":"pcb-assembly.html","pathToRoot":".","attachments":["img/img_7778.html","img/img_7779.html","img/img_7780.html","img/img_7776.html","img/img_7781.html","img/img_7782.html","img/img_7807.html"],"createdTime":1757995500054,"modifiedTime":1757995500054,"sourceSize":6813,"sourcePath":"PCB Assembly.md","exportPath":"pcb-assembly.html","showInTree":true,"treeOrder":26,"backlinks":["index.html"],"type":"markdown"},"pcb-design.html":{"title":"PCB Design","icon":"","description":"The PCB for this project is the very first custom PCB I have designed myself. Measuring 86mm by 55mm, it is about the size of a <a data-tooltip-position=\"top\" aria-label=\"https://www.zenbusiness.com/blog/business-card-dimensions/\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.zenbusiness.com/blog/business-card-dimensions/\" target=\"_self\">standard European business card</a>. I designed the board in KiCad 9. This project is also my first project with entirely SMD components (besides the Tag Connect connector, which is not a soldered component).<br>It is a two-layer board manufactured on <a data-tooltip-position=\"top\" aria-label=\"https://docs.oshpark.com/services/afterdark/\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://docs.oshpark.com/services/afterdark/\" target=\"_self\">OSH Park's after dark service</a>, which uses a black substrate and clear solder mask that I found to be a good fit for this design. I started designing the board in May 2025 and ordered the first batch of boards around mid-June 2025. This was intended to catch errors in the board, but to my surprise the initial revision of the board worked perfectly.<br>Since this was my first time building a PCB from scratch, I needed the help of a lot of online resources. This <a data-tooltip-position=\"top\" aria-label=\"https://www.youtube.com/watch?v=aVUqaB0IMh4\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.youtube.com/watch?v=aVUqaB0IMh4\" target=\"_self\">STM32 PCB in KiCad</a> tutorial from YouTube channel <a data-tooltip-position=\"top\" aria-label=\"https://www.youtube.com/@PhilsLab\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.youtube.com/@PhilsLab\" target=\"_self\">Phil's Lab</a> really helped me to design and lay out the microcontroller section of the PCB. I also watched a design review by <a data-tooltip-position=\"top\" aria-label=\"https://www.youtube.com/@RobertFeranec\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.youtube.com/@RobertFeranec\" target=\"_self\">Robert Feranec</a> of a novice's first <a data-tooltip-position=\"top\" aria-label=\"https://www.youtube.com/watch?v=YzBtfN1LQtM\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.youtube.com/watch?v=YzBtfN1LQtM\" target=\"_self\">schematic</a> and <a data-tooltip-position=\"top\" aria-label=\"https://www.youtube.com/watch?v=-luLIJqURlY\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.youtube.com/watch?v=-luLIJqURlY\" target=\"_self\">PCB layout</a> to make sure I wasn't making the same mistakes.I also utilized the datasheets for the microcontroller, the boost converter, and especially the ePaper display. The display needs a lot of external components in order for its boost circuitry to work, so I made sure to build that part of the circuit as it was shown on the datasheet. <br>After I had finished the schematic and routing, I wanted to get a review of my design from someone with more experience. To do this, I made <a data-tooltip-position=\"top\" aria-label=\"https://www.reddit.com/r/PrintedCircuitBoard/comments/1kz87it/review_request_msp430_based_pcb_business_card/\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.reddit.com/r/PrintedCircuitBoard/comments/1kz87it/review_request_msp430_based_pcb_business_card/\" target=\"_self\">a post on the PrintedCircuitBoard subreddit</a> asking for help. This post led me to fix some issues with the board:\nincorrect numbering for the FPC connector\n90 degree angles in inappropriate locations\nacute angles\nlackluster GND fill on the back layer\ninsufficient space between the GND contact for the battery and the trace carrying battery voltage\nAfter fixing these issues, I ordered the board along with the components I needed.I chose to split the schematic into three blocks with a fourth root block making the connections between them. This was to avoid overcrowding a single schematic page with everything on the board.This page only has eight wires. Two go between the MCU block and the power block, providing an enable signal for the boost converter and a connection from the boost converter's output to the debugging connector, which will be discussed later. The remaining six wires are used to communicate with the ePaper display.The FPC connector block contains the FPC connector that connects to the ePaper display, as well as all of the support circuitry for the ePaper's boost converter. The circuitry here is pretty much copied from the reference design provided by the ePaper manufacturer, as I don't know enough to safely deviate from it.One issue I ran into with this section of the design was conflicting reference circuits from the maker of the driver chip inside the display and the vendor of the ePaper screen. The former seemed to have an extra capacitor in the boost circuitry, while the latter did not. Since the ePaper vendor's diagram seemed to match the breakout board I had on hand at the time, I decided to err on that side. However, I included an empty pad for that capacitor on the board (C200) in case my judgement was wrong and I needed to hand solder the capacitor on.Another issue with this section was that the connector symbol I downloaded from Molex seemed to have reverse pin numbering than what the ePaper datasheet and my breakout board expected. To fix this, I just adjusted the labels of each pin to match the corresponding ePaper pin. For example pin 1 got the label 24, while pin 24 got label 1. This did not change the labeling on the PCB view, but at that point I could follow the rat's nest to lay out the traces.The next page in the schematic contains the coin cell battery holding and the circuitry to boost its voltage up to a stable 3V. This is a crucial part of the design because, as I inconveniently learned last spring, an ePaper display draws too much power to run directly off of a coin cell battery. The power from the battery first goes through a Schottky diode to provide reverse polarity protection. The boost converter did not seem to be very reverse polarity tolerant, and given the high risk of inserting a coin cell backwards I wanted to make sure users couldn't destroy the power circuitry from one mishap. The voltage drop due to the Schottky diode will be made up for in the boost circuitry.<br>The rest of the circuit is based on the provided circuit in the datasheet for the boost converter IC. I used TI's <a data-tooltip-position=\"top\" aria-label=\"https://webench.ti.com/power-designer/\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://webench.ti.com/power-designer/\" target=\"_self\">WEBENCH</a> to help me to pick components for the circuit. One major change I made was using two 10μF capacitors on the output of the boost regulator instead of the single 22μF capacitor the datasheet recommended. This allowed me to use the same type of capacitor on the input and output of the regulator. I made sure to run this change through WEBENCH, and the simulated output looked acceptable to me.<br>The last page of the schematic contains the microcontroller and its support circuitry. It also contains the debugging connection, a six-pin<a data-tooltip-position=\"top\" aria-label=\"https://www.tag-connect.com/\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.tag-connect.com/\" target=\"_self\"> Tag Connect</a> footprint.The only support circuitry included are some decoupling capacitors for the microcontroller, some circuitry to handle board resets, and the 32k crystal with its load capacitors. I had a bit of trouble selecting the values for these, but eventually settled on 6pF with the help of an online calculator.Since this design was fairly simple and I didn't want to add extra cost, I chose to make the board on two layers. This did present a challenge at times, but I was still able to route most of my signals on the top layer. This allowed me to use the vast majority of the bottom layer as a ground plane, with only a few cutouts for some signals that couldn't fit on the top layer. In addition to the area for my information, there are four main circuit areas on the board, roughly corresponding to the three pages of the schematic:\nBattery holder\nBoost converter and support circuitry\nMicrocontroller and support circuitry\nConnector to ePaper and support circuitry\nThe location of the FPC connector was relatively fixed due to the short length of the FPC cable and the need to have the display centered on the board. Wanting the battery connector to be near the edge of the board also added a constraint to the design. I also wanted to make sure my contact information had plenty of room and wasn't cluttered by components.Once I had finished laying out the board, I designed a graphic with my name, major, email, and some QR codes to my LinkedIn and the project repository. I had to split the graphic into a layer that would be exposed and gold plated, and an area to be printed in silkscreen. I then used KiCad's image conversion tools to convert both images to layers I could place on the board before placing them in the space I had left earlier.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"The Process","level":1,"id":"The_Process_0"},{"heading":"The Schematic","level":1,"id":"The_Schematic_0"},{"heading":"Root","level":2,"id":"Root_0"},{"heading":"FPC Connector","level":2,"id":"FPC_Connector_0"},{"heading":"Battery and Switching Regulator","level":2,"id":"Battery_and_Switching_Regulator_0"},{"heading":"Microcontroller","level":2,"id":"Microcontroller_0"},{"heading":"PCB Layout","level":1,"id":"PCB_Layout_0"}],"links":[],"author":"","coverImageURL":"","fullURL":"pcb-design.html","pathToRoot":".","attachments":[],"createdTime":1757995500054,"modifiedTime":1757995500055,"sourceSize":7610,"sourcePath":"PCB Design.md","exportPath":"pcb-design.html","showInTree":true,"treeOrder":27,"backlinks":["index.html"],"type":"markdown"},"project-outline.html":{"title":"Project Outline","icon":"","description":"\nCreate a program that simulates Conway's Game of Life on a fixed sized board. (<a data-href=\"11-30-24\" href=\"daily/11-30-24.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">11-30-24</a>)\n<br>Random seeding of the initial state. (<a data-href=\"11-30-24\" href=\"daily/11-30-24.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">11-30-24</a>)\n<br>Add various time scales, as well as step functionality. (<a data-href=\"12-7-24\" href=\"daily/12-7-24.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">12-7-24</a>)\n<br>Save the state to a file after each step, at first naively. (<a data-href=\"12-7-24\" href=\"daily/12-7-24.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">12-7-24</a>)\n<br>Investigate and implement methods to compress the state size between steps. (<a data-href=\"12-7-24\" href=\"daily/12-7-24.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">12-7-24</a>)\nBreak off state save/load into a HAL. [12-14-24]\nBreak off display interaction into a HAL. [12-14-24]\nSeparate a single state update into a function that can be called either on msp430 or by the simulator. [12-14-24]\n<br>Create a build process for the MSP430. <a data-href=\"12-30-24\" href=\"daily/12-30-24.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">12-30-24</a>\nwhen this step is done, the step function should contain no I/O except through the HAL <br>Based on the simulator, choose an appropriate MSP430 processor <a data-href=\"12-22-24\" href=\"daily/12-22-24.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">12-22-24</a> MSP430FR2433, has 16kB (bytes) Constrain the simulator to run within the amount of memory the processor has\nProduce MSP430 assembly from the program. [12-22-24]\nOrder necessary parts. [12-22-24]\nSet up bootstrap code for MSP430\nImplement sending/recieving data (state, display)\n<br>Move state to hardware <a data-href=\"1-7-25\" href=\"daily/1-7-25.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">1-7-25</a>\n<br>Move step time to hardware <a data-href=\"2-9-25\" href=\"daily/2-9-25.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">2-9-25</a>\n<br>Implement eInk interface (will take a while, API may need to be restructured) <a data-href=\"2-4-25\" href=\"daily/2-4-25.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">2-4-25</a>\nwhen this step is complete, all desired functionality should be complete, just not in the correct form factor Design a custom PCB to house all components\nAdd art/contact info to PCB\nOrder standalone components, PCB, PCB mask\nAssemble\n","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Step 1: Create a Simulated Card on PC","level":1,"id":"Step_1_Create_a_Simulated_Card_on_PC_0"},{"heading":"Step 2: Hardware Prototyping","level":1,"id":"Step_2_Hardware_Prototyping_0"},{"heading":"Step 3: Hardware Design","level":1,"id":"Step_3_Hardware_Design_0"}],"links":["daily/11-30-24.html","daily/11-30-24.html","daily/12-7-24.html","daily/12-7-24.html","daily/12-7-24.html","daily/12-30-24.html","daily/12-22-24.html","daily/1-7-25.html","daily/2-9-25.html","daily/2-4-25.html"],"author":"","coverImageURL":"","fullURL":"project-outline.html","pathToRoot":".","attachments":[],"createdTime":1736390786505,"modifiedTime":1739210824168,"sourceSize":1737,"sourcePath":"Project Outline.md","exportPath":"project-outline.html","showInTree":true,"treeOrder":28,"backlinks":["daily/11-30-24.html","index.html"],"type":"markdown"},"zig.html":{"title":"Zig","icon":"","description":"If you take a look at the source code for this project, you may notice that there is not a single line of C present. For a project of this type, that's an unusual occurrence. C is the standard language for low-level and embedded programming. C also has some of the best support for cross compilation out there. Since this project aims to share parts of the codebase between the desktop simulator and the embedded microcontroller, this should be all the more reason to use C.Instead, you will find that this project is written in <a data-tooltip-position=\"top\" aria-label=\"https://ziglang.org/\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://ziglang.org/\" target=\"_self\">Zig</a>. The creator of this language, Andrew Kelly, <a data-tooltip-position=\"top\" aria-label=\"https://andrewkelley.me/post/zig-cc-powerful-drop-in-replacement-gcc-clang.html\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://andrewkelley.me/post/zig-cc-powerful-drop-in-replacement-gcc-clang.html\" target=\"_self\">wants it to be a replacement for C</a>, especially in the areas mentioned previously. I think that Zig is on the right track to reach that goal from what I've seen. I want to go over some of my favorite features of Zig that have led me to try it out and use it in this project.The C macro system is a very clever way to enable changing code at compile time. Through a series of what are essentially string replacements, a C codebase can be reconfigured with just a few flags at compile time. However, it seems that we can do a lot better than glorified search-and-replace. From what I've heard from others and the little that I have personally seen, dealing with C codebases that use extensive amounts of macros in \"hacky\" ways is awful.<br>A related but very different concept is the idea of running code at compile time. I first learned about this concept from <a data-tooltip-position=\"top\" aria-label=\"https://github.com/BSVino/JaiPrimer/blob/master/JaiPrimer.md\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://github.com/BSVino/JaiPrimer/blob/master/JaiPrimer.md\" target=\"_self\">a description of the unreleased Jai language</a>. This seems incredible at first, but there is really nothing special going on. We already have the ability to compile and run programs. Why not do that recursively? One of my favorite uses for systems like this is creating look-up tables. This way the code to generate the table can stay in the same program (as opposed to having something like a Python script to generate it) while being readable (as opposed to pasting the table into the source file with no explanation).Here's an example from the program:const stateTable = table: { var table: [64]u8 = undefined; @memset(&amp;table, 0); for (0..512) |i| { const neighborhood = (i &amp; 1) + ((i &gt;&gt; 1) &amp; 1) + ((i &gt;&gt; 2) &amp; 1) + ((i &gt;&gt; 3) &amp; 1) + ((i &gt;&gt; 5) &amp; 1) + ((i &gt;&gt; 6) &amp; 1) + ((i &gt;&gt; 7) &amp; 1) + ((i &gt;&gt; 8) &amp; 1); if (((i &gt;&gt; 4) &amp; 1) &gt; 0) { table[i / 8] |= @as(u8, @intFromBool((neighborhood &gt;= 2) and (neighborhood &lt;= 3))) &lt;&lt; @as(u3, i &amp; 0x7); } else { table[i / 8] |= @as(u8, @intFromBool(neighborhood == 3)) &lt;&lt; @as(u3, i &amp; 0x7); } } break :table table;\n};\n<br>This table is used to look up the next state of a cell given the cell's current state and those of its neighbors. I talk more about the lookup table system in <a data-href=\"11-30-24\" href=\"daily/11-30-24.html\" class=\"internal-link\" target=\"_self\" rel=\"noopener nofollow\">11-30-24</a>, but here I want to focus on how I implemented the table using Zig's comptime system. If I was using C, I probably would have written a Python script to compute the table, print it, and manually turn it into a Zig array. This has the disadvantage of looking like a opaque blob to readers and requiring a separate Python script to be included.<br>The first thing to notice is that this does not look like a normal array initialization. There is no type provided, nor is there a list of elements to include. What is here is a labeled <a data-tooltip-position=\"top\" aria-label=\"https://ziglang.org/documentation/master/#Blocks\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://ziglang.org/documentation/master/#Blocks\" target=\"_self\">block</a>. The value of the block will be equal to what is returned using the break keyword. The key part is that this does not happen when the program is run. Rather, the compiler will evaluate the code inside of the block, take the value it outputs, and embed it into the program as if we had initialized stateTable with that value directly.The next bonus is that the code in this block, minus the break statement. is perfectly normal runtime Zig code. If you wanted, you could take it and paste it in the main function and it would word just fine.One other use of the comptime system that is not used in this project but is used extensively in the standard library is typing. I am a fan of having types in languages; I much prefer using Typescript over Javascript, and I appreciate type annotations in Python code.Zig's types follow a simple rule: they only exist at compile time. There is no reflection style type checking of arbitrary values at runtime. If you try to, the compiler will make sure to let you know. But as long as the code you are running stays in compile time, you can do all of the reflection you want. This is actually used one time in the project, albeit in a minor manor.var row_idx: u32 = 0;\ncomptime { std.debug.assert((1 &lt;&lt; @typeInfo(@TypeOf(row_idx)).int.bits) &gt;= height);\n}\nThe variable row_idx is used to simulate row-by-row drawing functionality in the desktop hal while actually only drawing once. As such, the specific type of this number is not terribly important. However, the type of the number must be big enough to hold the number of rows of the board (minus 1). With another use of comptime code, we can make sure that the type satisfies this requiement. Inside the comptime block, we can perform @typeInfo(@TypeOf(row_idx)).int.bits. This gets the type of row_idx, which is used to get a struct containing information about it, and then uses that struct to find the number of bits row_idx holds.Another very common use of types is to achieve a system similar to generics in languages like Java. This system relies on two facts:\nTypes can be used as parameters for a function\nNew types can be created and returned from a function<br>\nThe Zig documentation gives <a data-tooltip-position=\"top\" aria-label=\"https://ziglang.org/documentation/master/#struct\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://ziglang.org/documentation/master/#struct\" target=\"_self\">an example</a> of this (do a search for LinkedList). In this example, the function LinkedList takes in a type at compile time and returns a custom struct type tailored to that data type. This allows one piece of code to be reused for many different types without having to store any type information at runtime.\nWhen I've taken a look at C in the past, I've been confused by the number of build systems out there. Judging from what I've seen online, this is a common sentiment. This is why I appreciate languages like Rust and Zig that have one very obvious and almost universally utilized way to build projects. With Zig, your entire project's build is controlled from build.zig. Just like comptime, this allows you to use the Zig language itself to help with building your application. <br>Zig also has built in dependency management too. While it's not my favorite, it follows the Zig pattern of reusing existing functionality in a clever way. Any dependencies your project needs are listed in build.zig.zon. The zon stands for Zig Object Notation, which is nearly if not exactly the same syntax that Zig uses for structs. The contents are described in more detail <a data-tooltip-position=\"top\" aria-label=\"https://github.com/ziglang/zig/blob/master/doc/build.zig.zon.md\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://github.com/ziglang/zig/blob/master/doc/build.zig.zon.md\" target=\"_self\">here</a>, but the core is attaching either a URL and hash or a local path to each dependency. I started off using the first method, but had to switch to the second after I needed to manually make the external libraries I was using build with a newer release of Zig.\nA very simple solution that gets the job done.Speaking of the Zig switch, Zig's packaging is also very convenient. Before I upgraded to master, I was just using version 0.13.0 provided in Fedora's repos. Here are all the steps I took to switch to a new release of Zig:\n<br>Download the new version as a prebuilt archive from <a rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://ziglang.org/download/\" target=\"_self\">https://ziglang.org/download/</a>.\nDecompress the archive into my project.\nSwitch from using zig to ./zig-master/zig to run commands.\nThat's it. Once I had fixed the very few breaking changes from 0.13.0 to the master branch at the time, everything worked as normal. No convoluted build process, no polluted PATH, everything just works. <br>The archive from Zig's website for Zig 0.13.0 for x86_64 Linux is 45MiB, and supports building to any supported target on <a data-tooltip-position=\"top\" aria-label=\"https://ziglang.org/download/0.13.0/release-notes.html#Tier-3-Support\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://ziglang.org/download/0.13.0/release-notes.html#Tier-3-Support\" target=\"_self\">this table</a> (<a data-tooltip-position=\"top\" aria-label=\"https://ziglang.org/learn/overview/\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://ziglang.org/learn/overview/\" target=\"_self\">more</a>, see \"Cross-compiling is a first-class use case\"). There is no need to rebuild the compiler or download a special version for obscure architectures. It can pull this off by only shipping with the source code for various libraries it needs and only building them for a target when requested.In addition to being able to cross-compile Zig in this manner, an install of Zig can also serve as a fully featured C compiler. This combination of features has led to some people using Zig as a build system for C projects. Raylib, the C graphics library used in this project, actually supports building in this manner.<br>If you want to hear more about these features as well as some others, you should watch <a data-tooltip-position=\"top\" aria-label=\"https://www.youtube.com/watch?v=Gv2I7qTux7g\" rel=\"noopener nofollow\" class=\"external-link is-unresolved\" href=\"https://www.youtube.com/watch?v=Gv2I7qTux7g\" target=\"_self\">this talk</a> given by Andrew Kelly. Even though it is a few years old, all of the points made still hold up today. I view Zig as an effort to update C with all of the knowledge gained in computer science and software engineering over the past half a century. I hope that it will one day gain as much traction as C has now. Because of these new features, and its support for the MSP430 architecture, I have chosen it as the language for this project.","aliases":[],"inlineTags":[],"frontmatterTags":[],"headers":[{"heading":"Comptime","level":1,"id":"Comptime_0"},{"heading":"Types","level":1,"id":"Types_0"},{"heading":"Build System","level":1,"id":"Build_System_0"},{"heading":"End","level":1,"id":"End_0"}],"links":["daily/11-30-24.html"],"author":"","coverImageURL":"","fullURL":"zig.html","pathToRoot":".","attachments":[],"createdTime":1757995500055,"modifiedTime":1757995500055,"sourceSize":9457,"sourcePath":"Zig.md","exportPath":"zig.html","showInTree":true,"treeOrder":29,"backlinks":["daily/12-30-24.html","index.html"],"type":"markdown"}},"fileInfo":{"daily/1-7-25.html":{"createdTime":1738861547994,"modifiedTime":1738861547994,"sourceSize":11569,"sourcePath":"daily/1-7-25.md","exportPath":"daily/1-7-25.html","showInTree":true,"treeOrder":1,"backlinks":["project-outline.html","daily/2-4-25.html"],"type":"markdown","data":null},"daily/1-8-25.html":{"createdTime":1738861544237,"modifiedTime":1738861544237,"sourceSize":971,"sourcePath":"daily/1-8-25.md","exportPath":"daily/1-8-25.html","showInTree":true,"treeOrder":2,"backlinks":[],"type":"markdown","data":null},"daily/1-16-25.html":{"createdTime":1738643017010,"modifiedTime":1739210763856,"sourceSize":17032,"sourcePath":"daily/1-16-25.md","exportPath":"daily/1-16-25.html","showInTree":true,"treeOrder":3,"backlinks":[],"type":"markdown","data":null},"daily/2-4-25.html":{"createdTime":1739132899649,"modifiedTime":1739132899650,"sourceSize":7493,"sourcePath":"daily/2-4-25.md","exportPath":"daily/2-4-25.html","showInTree":true,"treeOrder":4,"backlinks":["project-outline.html"],"type":"markdown","data":null},"daily/2-9-25.html":{"createdTime":1739137443141,"modifiedTime":1739152347263,"sourceSize":6647,"sourcePath":"daily/2-9-25.md","exportPath":"daily/2-9-25.html","showInTree":true,"treeOrder":5,"backlinks":["project-outline.html"],"type":"markdown","data":null},"daily/11-27-24.html":{"createdTime":1733290044951,"modifiedTime":1733290044951,"sourceSize":400,"sourcePath":"daily/11-27-24.md","exportPath":"daily/11-27-24.html","showInTree":true,"treeOrder":6,"backlinks":[],"type":"markdown","data":null},"daily/11-30-24.html":{"createdTime":1733290044951,"modifiedTime":1737172718967,"sourceSize":9155,"sourcePath":"daily/11-30-24.md","exportPath":"daily/11-30-24.html","showInTree":true,"treeOrder":7,"backlinks":["project-outline.html","zig.html","daily/12-14-24.html"],"type":"markdown","data":null},"daily/12-3-24.html":{"createdTime":1733290044952,"modifiedTime":1733290044952,"sourceSize":21176,"sourcePath":"daily/12-3-24.md","exportPath":"daily/12-3-24.html","showInTree":true,"treeOrder":8,"backlinks":[],"type":"markdown","data":null},"daily/12-7-24.html":{"createdTime":1738861539685,"modifiedTime":1738861539685,"sourceSize":2591,"sourcePath":"daily/12-7-24.md","exportPath":"daily/12-7-24.html","showInTree":true,"treeOrder":9,"backlinks":["project-outline.html"],"type":"markdown","data":null},"daily/12-14-24.html":{"createdTime":1738861535729,"modifiedTime":1738861535729,"sourceSize":3386,"sourcePath":"daily/12-14-24.md","exportPath":"daily/12-14-24.html","showInTree":true,"treeOrder":10,"backlinks":["daily/12-22-24.html"],"type":"markdown","data":null},"daily/12-22-24.html":{"createdTime":1738861529323,"modifiedTime":1738861529323,"sourceSize":11881,"sourcePath":"daily/12-22-24.md","exportPath":"daily/12-22-24.html","showInTree":true,"treeOrder":11,"backlinks":["project-outline.html"],"type":"markdown","data":null},"daily/12-30-24.html":{"createdTime":1736390786507,"modifiedTime":1736390786507,"sourceSize":6150,"sourcePath":"daily/12-30-24.md","exportPath":"daily/12-30-24.html","showInTree":true,"treeOrder":12,"backlinks":["project-outline.html","daily/1-7-25.html"],"type":"markdown","data":null},"img/first_img.jpg":{"createdTime":1739132899650,"modifiedTime":1739132899655,"sourceSize":2575058,"sourcePath":"img/first_img.jpg","exportPath":"img/first_img.jpg","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"img/first_img.html":{"createdTime":1739132899650,"modifiedTime":1739132899655,"sourceSize":2575058,"sourcePath":"img/first_img.jpg","exportPath":"img/first_img.html","showInTree":true,"treeOrder":14,"backlinks":["daily/2-4-25.html"],"type":"attachment","data":null},"img/img_7776.jpeg":{"createdTime":1757995500055,"modifiedTime":1757995500059,"sourceSize":2125562,"sourcePath":"img/IMG_7776.jpeg","exportPath":"img/img_7776.jpeg","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"img/img_7776.html":{"createdTime":1757995500055,"modifiedTime":1757995500059,"sourceSize":2125562,"sourcePath":"img/IMG_7776.jpeg","exportPath":"img/img_7776.html","showInTree":true,"treeOrder":15,"backlinks":["pcb-assembly.html"],"type":"attachment","data":null},"img/img_7778.jpeg":{"createdTime":1757995500059,"modifiedTime":1757995500065,"sourceSize":2148214,"sourcePath":"img/IMG_7778.jpeg","exportPath":"img/img_7778.jpeg","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"img/img_7778.html":{"createdTime":1757995500059,"modifiedTime":1757995500065,"sourceSize":2148214,"sourcePath":"img/IMG_7778.jpeg","exportPath":"img/img_7778.html","showInTree":true,"treeOrder":16,"backlinks":["pcb-assembly.html"],"type":"attachment","data":null},"img/img_7779.jpeg":{"createdTime":1757995500065,"modifiedTime":1757995500069,"sourceSize":3231669,"sourcePath":"img/IMG_7779.jpeg","exportPath":"img/img_7779.jpeg","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"img/img_7779.html":{"createdTime":1757995500065,"modifiedTime":1757995500069,"sourceSize":3231669,"sourcePath":"img/IMG_7779.jpeg","exportPath":"img/img_7779.html","showInTree":true,"treeOrder":17,"backlinks":["pcb-assembly.html"],"type":"attachment","data":null},"img/img_7780.jpeg":{"createdTime":1757995500069,"modifiedTime":1757995500076,"sourceSize":2291958,"sourcePath":"img/IMG_7780.jpeg","exportPath":"img/img_7780.jpeg","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"img/img_7780.html":{"createdTime":1757995500069,"modifiedTime":1757995500076,"sourceSize":2291958,"sourcePath":"img/IMG_7780.jpeg","exportPath":"img/img_7780.html","showInTree":true,"treeOrder":18,"backlinks":["pcb-assembly.html"],"type":"attachment","data":null},"img/img_7781.jpeg":{"createdTime":1757995500076,"modifiedTime":1757995500083,"sourceSize":3448338,"sourcePath":"img/IMG_7781.jpeg","exportPath":"img/img_7781.jpeg","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"img/img_7781.html":{"createdTime":1757995500076,"modifiedTime":1757995500083,"sourceSize":3448338,"sourcePath":"img/IMG_7781.jpeg","exportPath":"img/img_7781.html","showInTree":true,"treeOrder":19,"backlinks":["pcb-assembly.html"],"type":"attachment","data":null},"img/img_7782.mov":{"createdTime":1757995500083,"modifiedTime":1757995500156,"sourceSize":57662975,"sourcePath":"img/IMG_7782.mov","exportPath":"img/img_7782.mov","showInTree":true,"treeOrder":0,"backlinks":[],"type":"other","data":null},"img/img_7782.html":{"createdTime":1757995500083,"modifiedTime":1757995500156,"sourceSize":57662975,"sourcePath":"img/IMG_7782.mov","exportPath":"img/img_7782.html","showInTree":true,"treeOrder":20,"backlinks":["pcb-assembly.html"],"type":"attachment","data":null},"img/img_7807.jpeg":{"createdTime":1757995500158,"modifiedTime":1757995500164,"sourceSize":2872751,"sourcePath":"img/IMG_7807.jpeg","exportPath":"img/img_7807.jpeg","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"img/img_7807.html":{"createdTime":1757995500158,"modifiedTime":1757995500164,"sourceSize":2872751,"sourcePath":"img/IMG_7807.jpeg","exportPath":"img/img_7807.html","showInTree":true,"treeOrder":21,"backlinks":["pcb-assembly.html"],"type":"attachment","data":null},"img/pasted-image-20241130232126.png":{"createdTime":1733290044952,"modifiedTime":1733290044952,"sourceSize":25695,"sourcePath":"img/Pasted image 20241130232126.png","exportPath":"img/pasted-image-20241130232126.png","showInTree":true,"treeOrder":0,"backlinks":[],"type":"media","data":null},"img/pasted-image-20241130232126.html":{"createdTime":1733290044952,"modifiedTime":1733290044952,"sourceSize":25695,"sourcePath":"img/Pasted image 20241130232126.png","exportPath":"img/pasted-image-20241130232126.html","showInTree":true,"treeOrder":22,"backlinks":["daily/11-30-24.html"],"type":"attachment","data":null},"component-selection.html":{"createdTime":1757995500054,"modifiedTime":1757995500054,"sourceSize":4492,"sourcePath":"Component Selection.md","exportPath":"component-selection.html","showInTree":true,"treeOrder":23,"backlinks":["index.html"],"type":"markdown","data":null},"early-planning-note.html":{"createdTime":1739210880247,"modifiedTime":1739210903021,"sourceSize":2767,"sourcePath":"Early Planning Note.md","exportPath":"early-planning-note.html","showInTree":true,"treeOrder":24,"backlinks":["index.html"],"type":"markdown","data":null},"index.html":{"createdTime":1757995500164,"modifiedTime":1758040923741,"sourceSize":1339,"sourcePath":"index.md","exportPath":"index.html","showInTree":true,"treeOrder":25,"backlinks":[],"type":"markdown","data":null},"pcb-assembly.html":{"createdTime":1757995500054,"modifiedTime":1757995500054,"sourceSize":6813,"sourcePath":"PCB Assembly.md","exportPath":"pcb-assembly.html","showInTree":true,"treeOrder":26,"backlinks":["index.html"],"type":"markdown","data":null},"pcb-design.html":{"createdTime":1757995500054,"modifiedTime":1757995500055,"sourceSize":7610,"sourcePath":"PCB Design.md","exportPath":"pcb-design.html","showInTree":true,"treeOrder":27,"backlinks":["index.html"],"type":"markdown","data":null},"project-outline.html":{"createdTime":1736390786505,"modifiedTime":1739210824168,"sourceSize":1737,"sourcePath":"Project Outline.md","exportPath":"project-outline.html","showInTree":true,"treeOrder":28,"backlinks":["daily/11-30-24.html","index.html"],"type":"markdown","data":null},"zig.html":{"createdTime":1757995500055,"modifiedTime":1757995500055,"sourceSize":9457,"sourcePath":"Zig.md","exportPath":"zig.html","showInTree":true,"treeOrder":29,"backlinks":["daily/12-30-24.html","index.html"],"type":"markdown","data":null},"site-lib/scripts/graph-wasm.wasm":{"createdTime":1758040903707,"modifiedTime":1757995500053.063,"sourceSize":23655,"sourcePath":"","exportPath":"site-lib/scripts/graph-wasm.wasm","showInTree":false,"treeOrder":0,"backlinks":[],"type":"other","data":null},"site-lib/fonts/94f2f163d4b698242fef.otf":{"createdTime":1758040950434,"modifiedTime":1758040950434,"sourceSize":66800,"sourcePath":"","exportPath":"site-lib/fonts/94f2f163d4b698242fef.otf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/72505e6a122c6acd5471.woff2":{"createdTime":1758040950435,"modifiedTime":1758040950435,"sourceSize":104232,"sourcePath":"","exportPath":"site-lib/fonts/72505e6a122c6acd5471.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/2d5198822ab091ce4305.woff2":{"createdTime":1758040950436,"modifiedTime":1758040950436,"sourceSize":104332,"sourcePath":"","exportPath":"site-lib/fonts/2d5198822ab091ce4305.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/c8ba52b05a9ef10f4758.woff2":{"createdTime":1758040950436,"modifiedTime":1758040950436,"sourceSize":98868,"sourcePath":"","exportPath":"site-lib/fonts/c8ba52b05a9ef10f4758.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/cb10ffd7684cd9836a05.woff2":{"createdTime":1758040950437,"modifiedTime":1758040950437,"sourceSize":106876,"sourcePath":"","exportPath":"site-lib/fonts/cb10ffd7684cd9836a05.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/293fd13dbca5a3e450ef.woff2":{"createdTime":1758040950438,"modifiedTime":1758040950438,"sourceSize":105924,"sourcePath":"","exportPath":"site-lib/fonts/293fd13dbca5a3e450ef.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/085cb93e613ba3d40d2b.woff2":{"createdTime":1758040950439,"modifiedTime":1758040950439,"sourceSize":112184,"sourcePath":"","exportPath":"site-lib/fonts/085cb93e613ba3d40d2b.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/b5f0f109bc88052d4000.woff2":{"createdTime":1758040950439,"modifiedTime":1758040950439,"sourceSize":105804,"sourcePath":"","exportPath":"site-lib/fonts/b5f0f109bc88052d4000.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/cbe0ae49c52c920fd563.woff2":{"createdTime":1758040950440,"modifiedTime":1758040950440,"sourceSize":106108,"sourcePath":"","exportPath":"site-lib/fonts/cbe0ae49c52c920fd563.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/535a6cf662596b3bd6a6.woff2":{"createdTime":1758040950440,"modifiedTime":1758040950440,"sourceSize":111708,"sourcePath":"","exportPath":"site-lib/fonts/535a6cf662596b3bd6a6.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/70cc7ff27245e82ad414.ttf":{"createdTime":1758040950443,"modifiedTime":1758040950443,"sourceSize":192740,"sourcePath":"","exportPath":"site-lib/fonts/70cc7ff27245e82ad414.ttf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/454577c22304619db035.ttf":{"createdTime":1758040950441,"modifiedTime":1758040950441,"sourceSize":161376,"sourcePath":"","exportPath":"site-lib/fonts/454577c22304619db035.ttf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/52ac8f3034507f1d9e53.ttf":{"createdTime":1758040950443,"modifiedTime":1758040950443,"sourceSize":191568,"sourcePath":"","exportPath":"site-lib/fonts/52ac8f3034507f1d9e53.ttf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/05b618077343fbbd92b7.ttf":{"createdTime":1758040950444,"modifiedTime":1758040950444,"sourceSize":155288,"sourcePath":"","exportPath":"site-lib/fonts/05b618077343fbbd92b7.ttf","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/fonts/4bb6ac751d1c5478ff3a.woff2":{"createdTime":1758040950432,"modifiedTime":1758040950432,"sourceSize":7876,"sourcePath":"","exportPath":"site-lib/fonts/4bb6ac751d1c5478ff3a.woff2","showInTree":false,"treeOrder":0,"backlinks":[],"type":"font","data":null},"site-lib/media/6155340132a851f6089e.svg":{"createdTime":1758040950433,"modifiedTime":1758040950433,"sourceSize":315,"sourcePath":"","exportPath":"site-lib/media/6155340132a851f6089e.svg","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"site-lib/media/2308ab1944a6bfa5c5b8.svg":{"createdTime":1758040950434,"modifiedTime":1758040950434,"sourceSize":278,"sourcePath":"","exportPath":"site-lib/media/2308ab1944a6bfa5c5b8.svg","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"site-lib/html/file-tree-content.html":{"createdTime":1758040950945,"modifiedTime":1758040950945,"sourceSize":10582,"sourcePath":"","exportPath":"site-lib/html/file-tree-content.html","showInTree":false,"treeOrder":0,"backlinks":[],"type":"html","data":null},"site-lib/scripts/webpage.js":{"createdTime":1758040904377,"modifiedTime":1758040904377,"sourceSize":110729,"sourcePath":"","exportPath":"site-lib/scripts/webpage.js","showInTree":false,"treeOrder":0,"backlinks":[],"type":"script","data":null},"site-lib/scripts/graph-wasm.js":{"createdTime":1758040904377,"modifiedTime":1758040904377,"sourceSize":12885,"sourcePath":"","exportPath":"site-lib/scripts/graph-wasm.js","showInTree":false,"treeOrder":0,"backlinks":[],"type":"script","data":null},"site-lib/scripts/graph-render-worker.js":{"createdTime":1758040904377,"modifiedTime":1758040904377,"sourceSize":5681,"sourcePath":"","exportPath":"site-lib/scripts/graph-render-worker.js","showInTree":false,"treeOrder":0,"backlinks":[],"type":"script","data":null},"site-lib/media/favicon.png":{"createdTime":1758040950310,"modifiedTime":1758040950310,"sourceSize":1105,"sourcePath":"","exportPath":"site-lib/media/favicon.png","showInTree":false,"treeOrder":0,"backlinks":[],"type":"media","data":null},"site-lib/styles/obsidian.css":{"createdTime":1758040950577,"modifiedTime":1758040950577,"sourceSize":198273,"sourcePath":"","exportPath":"site-lib/styles/obsidian.css","showInTree":false,"treeOrder":0,"backlinks":[],"type":"style","data":null},"site-lib/styles/global-variable-styles.css":{"createdTime":1758040950410,"modifiedTime":1758040950410,"sourceSize":305,"sourcePath":"","exportPath":"site-lib/styles/global-variable-styles.css","showInTree":false,"treeOrder":0,"backlinks":[],"type":"style","data":null},"site-lib/styles/main-styles.css":{"createdTime":1758040904411,"modifiedTime":1758040904411,"sourceSize":19521,"sourcePath":"","exportPath":"site-lib/styles/main-styles.css","showInTree":false,"treeOrder":0,"backlinks":[],"type":"style","data":null}},"sourceToTarget":{"daily/1-7-25.md":"daily/1-7-25.html","daily/1-8-25.md":"daily/1-8-25.html","daily/1-16-25.md":"daily/1-16-25.html","daily/2-4-25.md":"daily/2-4-25.html","daily/2-9-25.md":"daily/2-9-25.html","daily/11-27-24.md":"daily/11-27-24.html","daily/11-30-24.md":"daily/11-30-24.html","daily/12-3-24.md":"daily/12-3-24.html","daily/12-7-24.md":"daily/12-7-24.html","daily/12-14-24.md":"daily/12-14-24.html","daily/12-22-24.md":"daily/12-22-24.html","daily/12-30-24.md":"daily/12-30-24.html","img/first_img.jpg":"img/first_img.html","img/IMG_7776.jpeg":"img/img_7776.html","img/IMG_7778.jpeg":"img/img_7778.html","img/IMG_7779.jpeg":"img/img_7779.html","img/IMG_7780.jpeg":"img/img_7780.html","img/IMG_7781.jpeg":"img/img_7781.html","img/IMG_7782.mov":"img/img_7782.html","img/IMG_7807.jpeg":"img/img_7807.html","img/Pasted image 20241130232126.png":"img/pasted-image-20241130232126.html","Component Selection.md":"component-selection.html","Early Planning Note.md":"early-planning-note.html","index.md":"index.html","PCB Assembly.md":"pcb-assembly.html","PCB Design.md":"pcb-design.html","Project Outline.md":"project-outline.html","Zig.md":"zig.html","":"site-lib/styles/main-styles.css"},"featureOptions":{"backlinks":{"featureId":"backlinks","enabled":true,"unavailable":false,"alwaysEnabled":false,"hideSettingsButton":false,"featurePlacement":{"selector":".footer","type":"start","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"displayTitle":"Backlinks","info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""}},"tags":{"featureId":"tags","enabled":true,"unavailable":false,"alwaysEnabled":false,"hideSettingsButton":false,"featurePlacement":{"selector":".header .data-bar","type":"end","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"displayTitle":"","info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"showInlineTags":true,"showFrontmatterTags":true,"info_showInlineTags":{"show":true,"name":"","description":"Show tags defined inside the document at the top of the page.","placeholder":""},"info_showFrontmatterTags":{"show":true,"name":"","description":"Show tags defined in the frontmatter of the document at the top of the page.","placeholder":""}},"alias":{"featureId":"aliases","enabled":true,"unavailable":false,"alwaysEnabled":false,"hideSettingsButton":false,"featurePlacement":{"selector":".header .data-bar","type":"start","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"displayTitle":"Aliases","info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""}},"properties":{"featureId":"properties","enabled":true,"unavailable":false,"alwaysEnabled":false,"hideSettingsButton":false,"featurePlacement":{"selector":".header","type":"start","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"displayTitle":"Properties","info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"info_hideProperties":{"show":true,"name":"","description":"A list of properties to hide from the properties view","placeholder":""}},"fileNavigation":{"featureId":"file-navigation","enabled":true,"unavailable":false,"alwaysEnabled":false,"hideSettingsButton":false,"featurePlacement":{"selector":"#left-sidebar-content","type":"end","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"info_includePath":{"show":false,"name":"","description":"","placeholder":""},"showCustomIcons":false,"showDefaultFolderIcons":false,"showDefaultFileIcons":false,"defaultFolderIcon":"lucide//folder","defaultFileIcon":"lucide//file","defaultMediaIcon":"lucide//file-image","exposeStartingPath":true,"info_showCustomIcons":{"show":true,"name":"","description":"Show custom icons for files and folders","placeholder":""},"info_showDefaultFolderIcons":{"show":true,"name":"","description":"Show a default icon of a folder for every folder in the tree","placeholder":""},"info_showDefaultFileIcons":{"show":true,"name":"","description":"Show a default icon of a file for every file in the tree","placeholder":""},"info_defaultFolderIcon":{"show":true,"name":"","description":"The icon to use for folders. Prefix with 'lucide//' to use a Lucide icon","placeholder":""},"info_defaultFileIcon":{"show":true,"name":"","description":"The icon to use for files. Prefix with 'lucide//' to use a Lucide icon","placeholder":""},"info_defaultMediaIcon":{"show":true,"name":"","description":"The icon to use for media files. Prefix with 'lucide//' to use a Lucide icon","placeholder":""},"info_exposeStartingPath":{"show":true,"name":"","description":"Whether or not to show the current file in the file tree when the page is first loaded","placeholder":""},"includePath":"site-lib/html/file-tree.html"},"search":{"featureId":"search","enabled":true,"unavailable":false,"alwaysEnabled":false,"hideSettingsButton":false,"featurePlacement":{"selector":"#left-sidebar .topbar-content","type":"start","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"displayTitle":"Search...","info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""}},"outline":{"featureId":"outline","enabled":true,"unavailable":false,"alwaysEnabled":false,"hideSettingsButton":false,"featurePlacement":{"selector":"#right-sidebar-content","type":"end","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"displayTitle":"Outline","info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"startCollapsed":false,"minCollapseDepth":0,"info_startCollapsed":{"show":true,"name":"","description":"Should the outline start collapsed?","placeholder":""},"info_minCollapseDepth":{"show":true,"name":"","description":"Only allow outline items to be collapsed if they are at least this many levels deep in the tree.","placeholder":"","dropdownOptions":{"1":1,"2":2,"No Collapse":100}}},"themeToggle":{"featureId":"theme-toggle","enabled":true,"unavailable":false,"alwaysEnabled":false,"hideSettingsButton":false,"featurePlacement":{"selector":"#right-sidebar .topbar-content","type":"start","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"displayTitle":"","info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""}},"graphView":{"featureId":"graph-view","enabled":true,"unavailable":false,"alwaysEnabled":false,"hideSettingsButton":false,"featurePlacement":{"selector":"#right-sidebar-content","type":"start","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"displayTitle":"Graph View","info_displayTitle":{"show":true,"name":"","description":"Descriptive title to show above the feature","placeholder":""},"showOrphanNodes":true,"showAttachments":false,"allowGlobalGraph":true,"allowExpand":true,"attractionForce":1,"linkLength":15,"repulsionForce":80,"centralForce":2,"edgePruning":100,"minNodeRadius":3,"maxNodeRadius":7,"info_showOrphanNodes":{"show":true,"name":"","description":"Show nodes that are not connected to any other nodes.","placeholder":""},"info_showAttachments":{"show":true,"name":"","description":"Show attachments like images and PDFs as nodes in the graph.","placeholder":""},"info_allowGlobalGraph":{"show":true,"name":"","description":"Allow the user to view the global graph of all nodes.","placeholder":""},"info_allowExpand":{"show":true,"name":"","description":"Allow the user to pop-out the graph view to take up the whole screen","placeholder":""},"info_attractionForce":{"show":true,"name":"","description":"How much should linked nodes attract each other? This will make the graph appear more clustered.","placeholder":""},"info_linkLength":{"show":true,"name":"","description":"How long should the links between nodes be? The shorter the links the more connected nodes will cluster together.","placeholder":""},"info_repulsionForce":{"show":true,"name":"","description":"How much should nodes repel each other? This will make disconnected parts more spread out.","placeholder":""},"info_centralForce":{"show":true,"name":"","description":"How much should nodes be attracted to the center? This will make the graph appear more dense and circular.","placeholder":""},"info_edgePruning":{"show":true,"name":"","description":"Edges with a length above this threshold will not be rendered, however they will still contribute to the simulation. This can help large tangled graphs look more organised. Hovering over a node will still display these links.","placeholder":""},"info_minNodeRadius":{"show":true,"name":"","description":"How small should the smallest nodes be? The smaller a node is the less it will attract other nodes.","placeholder":""},"info_maxNodeRadius":{"show":true,"name":"","description":"How large should the largest nodes be? Nodes are sized by how many links they have. The larger a node is the more it will attract other nodes. This can be used to create a good grouping around the most important nodes.","placeholder":""}},"sidebar":{"featureId":"sidebar","enabled":true,"unavailable":false,"alwaysEnabled":false,"hideSettingsButton":false,"allowResizing":true,"allowCollapsing":true,"rightDefaultWidth":"20em","leftDefaultWidth":"20em","info_allowResizing":{"show":true,"name":"","description":"Whether or not to allow the sidebars to be resized","placeholder":""},"info_allowCollapsing":{"show":true,"name":"","description":"Whether or not to allow the sidebars to be collapsed","placeholder":""},"info_rightDefaultWidth":{"show":true,"name":"","description":"The default width of the right sidebar","placeholder":""},"info_leftDefaultWidth":{"show":true,"name":"","description":"The default width of the left sidebar","placeholder":""}},"customHead":{"featureId":"custom-head","enabled":true,"unavailable":false,"alwaysEnabled":false,"hideSettingsButton":false,"featurePlacement":{"selector":"head","type":"end","info_selector":{"show":true,"name":"","description":"CSS selector for an element. The feature will be placed relative to this element.","placeholder":""},"info_type":{"show":true,"name":"","description":"Will this feature be placed before, after, or inside (at the beggining or end).","placeholder":"","dropdownOptions":{"Before":"before","After":"after","Start":"start","End":"end"}}},"info_featurePlacement":{"show":true,"name":"","description":"Where to place this feature on the page. (Relative to the selector)","placeholder":""},"info_includePath":{"show":false,"name":"","description":"","placeholder":""},"sourcePath":"","info_sourcePath":{"show":true,"name":"","description":"The local path to the source .html file which will be included.","placeholder":"","fileInputOptions":{"makeRelativeToVault":true,"browseButton":true}},"includePath":"site-lib/html/custom-head.html"},"document":{"featureId":"obsidian-document","enabled":true,"unavailable":false,"alwaysEnabled":true,"hideSettingsButton":false,"allowFoldingLists":true,"allowFoldingHeadings":true,"documentWidth":"40em","info_allowFoldingLists":{"show":true,"name":"","description":"Whether or not to allow lists to be folded","placeholder":""},"info_allowFoldingHeadings":{"show":true,"name":"","description":"Whether or not to allow headings to be folded","placeholder":""},"info_documentWidth":{"show":true,"name":"","description":"The width of the document","placeholder":""}},"rss":{"featureId":"rss","enabled":false,"unavailable":false,"alwaysEnabled":false,"hideSettingsButton":false,"siteUrl":"","authorName":"","info_siteUrl":{"show":true,"name":"","description":"The url that this site will be hosted at","placeholder":"https://example.com/mysite"},"info_authorName":{"show":true,"name":"","description":"The name of the author of the site","placeholder":""}},"linkPreview":{"featureId":"link-preview","enabled":true,"unavailable":false,"alwaysEnabled":false,"hideSettingsButton":true}},"modifiedTime":1758040950588,"siteName":"gol_card_docs","vaultName":"gol_card_docs","exportRoot":"","baseURL":"","pluginVersion":"1.9.2","themeName":"","bodyClasses":"publish css-settings-manager styled-scrollbars show-inline-title show-ribbon is-focused","hasFavicon":false}